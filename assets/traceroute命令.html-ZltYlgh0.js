import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as o,j as a,z as c}from"./app-lp0sOEvl.js";const n={},t=c(`<h1 id="traceroute命令" tabindex="-1"><a class="header-anchor" href="#traceroute命令"><span>traceroute命令</span></a></h1><p><code>traceroute</code>命令尝试跟踪<code>IP</code>数据包到某个<code>Internet</code>主机的路由，方法是使用一个小<code>ttl</code>(生存时间)启动探测数据包，然后侦听来自网关的<code>ICMP</code>超时回复，它以<code>ttl</code>为<code>1</code>开始探测，并将其增加<code>1</code>，直到获得<code>ICMP port unreachable</code>或<code>TCP reset</code>，这意味着我们到达了<code>host</code>，或达到了最大值(默认为<code>30</code>跳)，在每个<code>ttl</code>设置处发送三个探测(默认)，并打印一行，显示<code>ttl</code>、网关地址和每个探测的往返时间，在请求时，地址后面可以有附加信息，如果探测结果来自不同的网关，则会打印每个响应系统的地址，如果在<code>5.0</code>秒内(默认值)没有响应，则会为该探测器打印一个<code>*</code>。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token punctuation">[</span>-46dFITUnreAV<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f first_ttl<span class="token punctuation">]</span> <span class="token punctuation">[</span>-g gate,<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i device<span class="token punctuation">]</span> 
           <span class="token punctuation">[</span>-m max_ttl<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p port<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s src_addr<span class="token punctuation">]</span> <span class="token punctuation">[</span>-q nqueries<span class="token punctuation">]</span> 
           <span class="token punctuation">[</span>-N squeries<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t tos<span class="token punctuation">]</span> <span class="token punctuation">[</span>-l flow_label<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w waittime<span class="token punctuation">]</span> 
           <span class="token punctuation">[</span>-z sendwait<span class="token punctuation">]</span> <span class="token punctuation">[</span>-UL<span class="token punctuation">]</span> <span class="token punctuation">[</span>-D<span class="token punctuation">]</span> <span class="token punctuation">[</span>-P proto<span class="token punctuation">]</span> <span class="token punctuation">[</span>--sport<span class="token operator">=</span>port<span class="token punctuation">]</span> <span class="token punctuation">[</span>-M method<span class="token punctuation">]</span> 
           <span class="token punctuation">[</span>-O mod_options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--mtu<span class="token punctuation">]</span> <span class="token punctuation">[</span>--back<span class="token punctuation">]</span> <span class="token function">host</span> <span class="token punctuation">[</span>packet_len<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>-4, -6</code>: 显式强制<code>IPv4</code>或<code>IPv6</code>跟踪路由，默认情况下，程序将尝试解析给定的名称，并自动选择适当的协议，如果解析主机名同时返回<code>IPv4</code>和<code>IPv6</code>地址，则<code>traceroute</code>将使用<code>IPv4</code>。</li><li><code>-I, --icmp</code>: 使用<code>ICMP ECHO</code>进行探测。</li><li><code>-T, --tcp</code>: 使用<code>TCP SYN</code>进行探测。</li><li><code>-d, --debug</code>: 启用套接字级调试，如果内核支持的话。</li><li><code>-F, --dont-fragment</code>: 不要对探测数据包进行分段，对于<code>IPv4</code>它还会设置<code>DF</code>位，该位告诉中间路由器也不要进行远程分段。通过<code>packet_len</code>命令参数更改探测数据包的大小，可以手动获取有关单个网络跃点的<code>MTU</code>的信息。从<code>Linux</code>内核<code>2.6.22</code>开始，非碎片化功能(例如<code>-F</code>或<code>--mtu</code>)才能正常工作，在该版本之前，<code>IPv6</code>始终是零散的，<code>IPv4</code>只能使用一次(从路由缓存中)发现的最终<code>mtu</code>，它可能小于设备的实际<code>mtu</code>。</li><li><code>-f first_ttl, --first=first_ttl</code>: 指定要启动的<code>TTL</code>，默认为<code>1</code>。</li><li><code>-g gate,..., --gateway=gate,...</code>: 告诉<code>traceroute</code>向传出数据包添加<code>IP</code>源路由选项，该选项告诉网络通过指定网关路由数据包(出于安全原因，大多数路由器已禁用源路由)，通常允许指定多个网关(以逗号分隔的列表)。对于<code>IPv6</code>允许使用<code>num</code>、<code>addr</code>、<code>addr</code>、<code>...</code>的形式，其中<code>num</code>是路由报头类型(默认为类型<code>2</code>)，注意，根据<code>rfc 5095</code>，现在不赞成使用<code>0</code>型路由头。</li><li><code>-i device, --interface=device</code>: 指定<code>traceroute</code>应该通过其发送数据包的接口，缺省情况下，接口是根据路由表选择的。</li><li><code>-m max_ttl, --max-hops=max_ttl</code>: 指定<code>traceroute</code>探测的最大跳数(最大生存时间值)，默认值为<code>30</code>。</li><li><code>-N squeries, --sim-queries=squeries</code>: 指定同时发送的探测报文数，同时发送多个探针可以大大提高跟踪路由的速度，默认值为<code>16</code>，注意某些路由器和主机可以使用<code>ICMP</code>速率限制，在这种情况下，指定太大的数字可能会导致某些响应丢失。</li><li><code>-n</code>: 在显示<code>IP</code>地址时不要尝试将它们映射到主机名。</li><li><code>-p port, --port=port</code>: 对于<code>UDP</code>跟踪，指定<code>traceroute</code>将使用的目的端口号，目标端口号将随每个探针递增，对于<code>ICMP</code>跟踪，指定初始<code>ICMP</code>序列值(每个探针也增加)，对于<code>TCP</code>和其他协议，仅指定要连接的(恒定)目标端口，使用<code>tcptraceroute</code>包装程序时，<code>-p</code>指定源端口。</li><li><code>-t tos, --tos=tos</code>: 对于<code>IPv4</code>，设置服务类型<code>TOS</code>和优先级值，有用的值是<code>16</code>低延迟和<code>8</code>高吞吐量，要使用某些<code>TOS</code>优先级值，必须是超级用户，对于<code>IPv6</code>，设置流量控制值。</li><li><code>-l flow_label, --flowlabel=flow_label</code>: 对<code>IPv6</code>数据包使用指定的<code>flow_label</code>。</li><li><code> -w MAX,HERE,NEAR, --wait=MAX,HERE,NEAR</code>: 设置等待探测响应的时间，以秒为单位，默认为<code>5.0</code>。</li><li><code>-q nqueries, --queries=nqueries</code>: 设置每个跃点的探测数据包数，默认值为<code>3</code>。</li><li><code>-r</code>: 绕过常规路由表，并直接发送到连接的网络上的主机，如果主机不在直接连接的网络上，则返回错误，此选项可用于通过没有路由的接口对本地主机执行<code>ping</code>操作。</li><li><code>-s src_addr, --source=src_addr</code>: 选择一个备用源地址，请注意必须选择一个接口的地址，默认情况下使用传出接口的地址。</li><li><code>-z sendwait, --sendwait=sendwait</code>: 探测之间的最小时间间隔，默认值为<code>0</code>，如果该值大于<code>10</code>，则以毫秒为单位指定一个数字，否则为秒数，也允许使用浮点值，当某些路由器对<code>ICMP</code>消息使用速率限制时非常有用。</li><li><code>-e, --extensions</code>: 显示<code>ICMP</code>扩展名，通用格式为<code>CLASS / TYPE</code>即后跟十六进制转储，所示的<code>MPLS</code>多协议标签交换数据已解析，格式为<code>MPLS:L=label,E=exp_use,S=stack_bottom,T=TTL (with any further objects separated by a slash (&quot;/&quot;))</code>。</li><li><code>-A, --as-path-lookups </code>: 在路由注册表中执行<code>AS</code>路径查找，并在相应地址后直接打印结果。</li><li><code>-M name --module=name</code>: 使用指定的模块(内置或外部)用于<code>traceroute</code>操作，大多数方法都有其快捷方式，例如<code>-I</code>表示<code>-M icmp</code>等。</li><li><code>-O OPTS,..., --options=OPTS,...</code>: 将特定于模块的选项<code>OPTS</code>用于<code>traceroute</code>模块，允许几个<code>OPTS</code>，以逗号分隔，例如如果<code>OPTS</code>是<code>help</code>，则打印帮助信息。</li><li><code>--sport=num</code>: 将源端口号用于传出数据包，表示为<code>-N 1</code>。</li><li><code>--fwmark=num</code>： 为传出数据包设置防火墙标记。</li><li><code>-U --udp</code>: 使用<code>UDP</code>到特定端口进行路由，而不是每个探针增加端口，默认端口为<code>53</code>。</li><li><code>-UL</code>: 使用<code>UDP LITE</code>进行路由，默认目标端口为<code>53</code>。</li><li><code>-D --dccp</code>: 使用<code>DCCP</code>请求进行路由，默认端口为<code>33434</code>。</li><li><code>-P prot --protocol=prot</code>: 使用协议保护的原始数据包进行路由。</li><li><code>--mtu</code>: 沿着被追踪的路径发现<code>MTU</code>，表示为<code>-F-N 1</code>。</li><li><code>--back</code>: 推断后向路径中的跳数，如果不同则打印。</li><li><code>-V</code>: 输出版本信息。</li><li><code>--help</code>: 输出帮助信息。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>使用<code>traceroute</code>查看路由信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定<code>IPv4</code>查看路由信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token parameter variable">-4</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定要启动的<code>TTL</code>，默认为<code>1</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token parameter variable">-f</span> <span class="token number">3</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不将<code>IP</code>地址解析为其域名。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token parameter variable">-n</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置每个跃点的探测数，默认为<code>3</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token parameter variable">-q</span> <span class="token number">1</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定完整的数据包长度，默认是<code>60</code>字节的数据包。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> www.google.com <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置要使用的目标端口，默认为<code>33434</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">traceroute</span> <span class="token parameter variable">-p</span> <span class="token number">20292</span> www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://www.computerhope.com/unix/utracero.htm
https://www.runoob.com/linux/linux-comm-traceroute.html
https://www.geeksforgeeks.org/traceroute-command-in-linux-with-examples/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),s=[t];function d(i,l){return o(),a("div",null,s)}const u=e(n,[["render",d],["__file","traceroute命令.html.vue"]]),m=JSON.parse('{"path":"/MacOS/Terminal/traceroute%E5%91%BD%E4%BB%A4.html","title":"traceroute命令","lang":"zh-CN","frontmatter":{"description":"traceroute命令 traceroute命令尝试跟踪IP数据包到某个Internet主机的路由，方法是使用一个小ttl(生存时间)启动探测数据包，然后侦听来自网关的ICMP超时回复，它以ttl为1开始探测，并将其增加1，直到获得ICMP port unreachable或TCP reset，这意味着我们到达了host，或达到了最大值(默认为30跳...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/traceroute%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"traceroute命令"}],["meta",{"property":"og:description","content":"traceroute命令 traceroute命令尝试跟踪IP数据包到某个Internet主机的路由，方法是使用一个小ttl(生存时间)启动探测数据包，然后侦听来自网关的ICMP超时回复，它以ttl为1开始探测，并将其增加1，直到获得ICMP port unreachable或TCP reset，这意味着我们到达了host，或达到了最大值(默认为30跳..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"traceroute命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1688},"filePathRelative":"MacOS/Terminal/traceroute命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{u as comp,m as data};
