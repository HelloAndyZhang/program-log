import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as a,j as n,z as s}from"./app-lp0sOEvl.js";const t={},o=s(`<h1 id="read命令" tabindex="-1"><a class="header-anchor" href="#read命令"><span>read命令</span></a></h1><p><code>read</code>命令被用来从标准输入读取单行数据，这个命令可以用来读取键盘输入，当使用重定向以及默认选项的情况下，可以读取文件中的一行数据，此时<code>read</code>会将换行符视为行尾，但是可以使用<code>-d</code>选项更改。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">read</span> <span class="token punctuation">[</span>-ers<span class="token punctuation">]</span> <span class="token punctuation">[</span>-a array<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d delim<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i text<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n nchars<span class="token punctuation">]</span> <span class="token punctuation">[</span>-N nchars<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p prompt<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t timeout<span class="token punctuation">]</span> <span class="token punctuation">[</span>-u fd<span class="token punctuation">]</span> <span class="token punctuation">[</span>name <span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>name2 <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>-a array</code>: 将单词存储在一个名为<code>array</code>的索引数组中，数组元素的编号从<code>0</code>开始。</li><li><code>-d delim</code>: 将定界符设置为<code>delim</code>，该字符表示行尾，如果未使用<code>-d</code>，则默认行定界符为换行符。</li><li><code>-e</code>: 从<code>shell</code>获取一行输入，用户手动输入字符，直到达到行分隔符为止。</li><li><code>-i text</code>: 当与<code>-e</code>结合使用并且仅在不使用<code>-s</code>的情况下，文本将作为输入行的初始文本插入，允许用户在输入行上编辑文本。</li><li><code>-n nchars</code>: 如果尚未达到行定界符，则在读取整数<code>nchars</code>个字符后停止读取。</li><li><code>-N nchars</code>: 忽略行定界符，仅在已读取<code>nchars</code>个字符，达到<code>EOF</code>或读取超时之后才停止读取。</li><li><code>-p prompt</code>: 在开始读取之前，不使用换行符打印字符串提示符。</li><li><code>-r</code>: 使用原始输入，具体来说，这个选项使<code>read</code>按字面意思解释反斜杠，而不是将它们解释为转义字符。</li><li><code>-s</code>: 当<code>read</code>从终端获取输入时，不显示按键。</li><li><code>-t timeout</code>: 如果在超时秒内未读取完整的输入行，则超时并返回失败，如果超时值为零，那么<code>read</code>将不会读取任何数据，但是如果输入可用于读取，则返回成功。如果未指定超时，则使用<code>shell</code>变量<code>TMOUT</code>的值(如果存在)，超时值可以是小数，例如<code>3.5</code>。</li><li><code>-u fd</code>: 从文件描述符<code>fd</code>中读取而不是从标准输入中读取，文件描述符应该是一个<code>small integer</code>。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>读取终端的输入，循环读入一直持续到按<code>Ctrl + D</code>即<code>EOF</code>为止，由于指定变量名<code>text</code>，因此整行文本都存储在变量<code>text</code>中，每当输入一行后按回车时，将会把输入的内容输出。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token builtin class-name">read</span> text
    <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$text</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取终端的输入，指定一个输入的超时时间。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">3</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;Text: &quot;</span> text
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Text: <span class="token variable">$text</span>&quot;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>Timeout&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按行读取文件中的内容。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line
<span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$line</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://www.computerhope.com/unix/bash/read.htm
https://www.runoob.com/linux/linux-comm-read.html
https://linuxize.com/post/how-to-read-a-file-line-by-line-in-bash/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),c=[o];function d(i,l){return a(),n("div",null,c)}const u=e(t,[["render",d],["__file","read命令.html.vue"]]),m=JSON.parse('{"path":"/MacOS/Terminal/read%E5%91%BD%E4%BB%A4.html","title":"read命令","lang":"zh-CN","frontmatter":{"description":"read命令 read命令被用来从标准输入读取单行数据，这个命令可以用来读取键盘输入，当使用重定向以及默认选项的情况下，可以读取文件中的一行数据，此时read会将换行符视为行尾，但是可以使用-d选项更改。 语法 参数 -a array: 将单词存储在一个名为array的索引数组中，数组元素的编号从0开始。 -d delim: 将定界符设置为delim，...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/read%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"read命令"}],["meta",{"property":"og:description","content":"read命令 read命令被用来从标准输入读取单行数据，这个命令可以用来读取键盘输入，当使用重定向以及默认选项的情况下，可以读取文件中的一行数据，此时read会将换行符视为行尾，但是可以使用-d选项更改。 语法 参数 -a array: 将单词存储在一个名为array的索引数组中，数组元素的编号从0开始。 -d delim: 将定界符设置为delim，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"read命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":2.22,"words":667},"filePathRelative":"MacOS/Terminal/read命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{u as comp,m as data};
