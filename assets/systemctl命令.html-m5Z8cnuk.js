import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as d,j as c,z as o}from"./app-lp0sOEvl.js";const i={},s=o(`<h1 id="systemctl命令" tabindex="-1"><a class="header-anchor" href="#systemctl命令"><span>systemctl命令</span></a></h1><p><code>Systemd</code>是一个命令组，涉及到系统管理的方方面面，而<code>systemctl</code>是<code>Systemd</code>的主命令，用于管理系统。</p><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>在历史上<code>Linux</code>的启动一直采用<code>init</code>进程，这种方法有两个缺点，一是启动时间长，<code>init</code>进程是串行启动，只有前一个进程启动完，才会启动下一个进程，二是启动脚本复杂，<code>init</code>进程只是执行启动脚本，不管其他事情，脚本需要自己处理各种情况，这往往使得脚本变得很长。<br><code>Systemd</code>就是为了解决这些问题而诞生的，它的设计目标是，为系统的启动和管理提供一套完整的解决方案，根据<code>Linux</code>惯例，字母<code>d</code>是守护进程<code>daemon</code>的缩写，<code>Systemd</code>这个名字的含义，就是它要守护整个系统。使用了<code>Systemd</code>，就不需要再用<code>init</code>了，<code>Systemd</code>取代了<code>initd</code>，成为系统的第一个进程<code>PID</code>等于<code>1</code>，其他进程都是它的子进程，<code>Systemd</code>的优点是功能强大，使用方便，缺点是体系庞大，非常复杂，事实上，现在还有很多人反对使用<code>Systemd</code>，理由就是它过于复杂，与操作系统的其他部分强耦合，违反<code>keep simple, keep stupid</code>的<code>Unix</code>哲学。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">{</span>COMMAND<span class="token punctuation">}</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>OPTIONS</span></a></h3><ul><li><code>-t, --type=</code>: 参数应该是以逗号分隔的单元类型列表，例如<code>service</code>和<code>socket</code>，如果其中一个参数是单位类型，则在列出单位时，将显示限制为某些单位类型，否则将显示所有类型的单位，作为一种特殊情况，如果其中一个参数是<code>help</code>，则将打印允许值的列表，程序将退出。</li><li><code>--state=</code>: 参数应该是以逗号分隔的单位负载、子状态或活动状态列表，列出单位时，仅显示处于指定状态的单位。</li><li><code>-p, --property=</code>: 使用<code>show</code>命令显示<code>unit/job/manager</code>属性时，将显示限制为参数指定的某些属性，如果未指定，则显示所有集合属性，参数应该是以逗号分隔的属性名列表，例如<code>MainPID</code>，如果多次指定，将显示具有指定名称的所有属性。</li><li><code>-a, --all</code>: 列出单位时，请显示所有加载的单位，无论其状态如何，包括不活动的单位，显示<code>unit/job/manager</code>属性时，无论是否设置，都显示所有属性，要列出系统上安装的所有单元，请改用<code>list-unit-files</code>命令。</li><li><code>-r, --recursive</code>: 当列出单位时，还显示本地容器的单位，本地容器的单位将以容器名称为前缀，并用单个冒号<code>:</code>分隔。</li><li><code>--reverse</code>: 显示具有列表依赖性的单元之间的反向依赖性，即在给定单元上具有类型为<code>Wants=</code>或<code>Requires=</code>的单元。</li><li><code>--after</code>: 使用<code>list-dependencies</code>列表依赖项，显示在指定单位之前排序的单位，换句话说，列出在指定单元的<code>After=</code>指令中的单元、在<code>Before=</code>指令中有指定单元的单元，或者是指定单元的隐式依赖项。</li><li><code>--before</code>: 使用<code>list-dependencies</code>列表依赖项，显示在指定单位之后排序的单位，换言之，列出在指定单元的<code>Before=</code>指令中、在<code>After=</code>指令中具有指定单元或以其他方式依赖于指定单元的单元。</li><li><code>-l, --full</code>: 不省略状态，即<code>list-units</code>列表单元、<code>list-jobs</code>列表作业和<code>list-timers</code>列表计时器的输出中的单元名称，<code> process tree entries</code>过程树条目，<code>journal output</code>日志输出或<code>truncate unit descriptions</code>截断单元描述。</li><li><code>--show-types</code>: 显示套接字时，显示套接字的类型。</li><li><code>--job-mode=</code>: 将新作业排队时，此选项控制如何处理已排队的作业，它采用<code>fail</code>、<code>replace</code>、<code>replace</code>、<code>replace-irreversibly</code>、<code>isolate</code>、<code>ignore dependencies</code>、<code>ignore requirements</code>或<code>flush</code>之一，默认为<code>replace</code>，除非使用了表示隔离作业模式的<code>isolate</code>命令。如果指定了<code>fail</code>，并且请求的操作与挂起的作业冲突，更具体地说导致已挂起的开始作业反转为停止作业，反之亦然，则导致操作失败。如果指定了<code>replace</code>默认值，则将根据需要替换任何冲突的挂起作业。如果指定了<code>replace-irreversibly</code>，则按<code>replace</code>操作，但也要将新作业标记为不可逆，这可以防止将来发生冲突的事务替换这些作业，甚至在不可逆作业仍挂起时排队，仍然可以使用<code>cancel</code>命令取消不可逆的作业。<code>isolate</code>仅对启动操作有效，并在启动指定单元时导致所有其他单元停止。使用隔离命令时，始终使用此模式。<code>flush</code>将导致在新作业排队时取消所有排队作业。如果指定了<code>ignore-dependencies</code>，那么将忽略此新作业的所有单元依赖项，并立即执行该操作，如果通过，则不会引入所通过单元的任何必需单元，并且不会遵循任何排序依赖关系，这主要是管理员的调试和救援工具，不应该被应用程序使用。<code>ignore-requirements</code>与<code>ignore-dependencies</code>类似，但只会导致忽略需求依赖项，排序依赖项仍将得到满足。</li><li><code>-i, --ignore-inhibitors</code>: 当系统关闭或请求睡眠状态时，忽略抑制器锁，应用程序可以建立抑制器锁，以避免某些重要操作如<code>CD</code>刻录等被系统关闭或睡眠状态中断，任何用户都可以使用这些锁，特权用户可以重写这些锁，如果使用任何锁，关机和睡眠状态请求通常会失败无论是否具有特权，并打印活动锁的列表，但是如果指定了<code>--ignore inhibitors</code>，则会忽略锁而不打印，并且无论如何都会尝试该操作，可能需要额外的权限。</li><li><code>-q, --quiet</code>: 禁止<code>snapshot</code>、<code>is-active</code>、<code>is-failed</code>、<code>is-enabled</code>、<code>is-system-running</code>、<code>enable</code>和<code>disable</code>的输出为标准输出。</li><li><code>--no-block</code>: 不要同步等待请求的操作完成，如果未指定，则将验证作业，将其加入队列，并且<code>systemctl</code>将等待直到完成，通过传递此参数，仅对其进行验证和排队。</li><li><code>--no-legend</code>: 不打印图例，即带有提示的列标题和页脚。</li><li><code>--user</code>: 与主叫用户的服务管理员传递信息，而不是与系统的服务管理员联系。</li><li><code>--system</code>: 与系统的服务管理传递信息，这是默认值。</li><li><code>--failed</code>: 列出失败状态的单元，这等效于<code>--state=failed</code>。</li><li><code>--no-wall</code>: 停止，关闭电源，重新启动之前，不发送<code>wall message</code>。</li><li><code>--global</code>: 当与<code>enable</code>和<code>disable</code>一起使用时，对全局用户配置目录进行操作，从而全局地启用或禁用所有用户将来登录的单元文件。</li><li><code>--no-reload</code>: 当与<code>enable</code>和<code>disable</code>一起使用时，不要在执行更改后隐式地重新加载守护程序配置。</li><li><code>--no-ask-password</code>: 与<code>start</code>和相关命令一起使用时，禁用询问密码，后台服务可能需要输入密码或密码短语字符串，例如解锁系统硬盘或加密证书，除非指定了此选项并且命令是从终端调用的，否则<code>systemctl</code>将在终端上向用户查询必要的机密，使用此选项可关闭此行为，在这种情况下，必须通过其他方式例如图形密码代理提供密码，否则服务可能会失败，这还禁止查询用户以进行特权操作的身份验证。</li><li><code>--kill-who=</code>: 与<code>kill</code>一起使用时，选择要向哪个进程发送信号，必须是<code>main</code>、<code>control</code>或<code>all</code>中的一个，以选择是仅终止主进程、控制进程还是终止单元的所有进程，单元的主要过程是定义其生命周期的过程，一个单元的控制过程是由管理者调用以引起其状态变化的过程。例如由于服务单元的<code>ExecStartPre=</code>、<code>ExecStop=</code>或<code>ExecReload=</code>设置而启动的所有进程都是控制进程，注意每个单元一次只有一个控制过程，因为一次只执行一个状态更改，对于<code>type=forking</code>的服务，<code>ExecStart=manager</code>启动的初始进程是一个控制进程，而最终由该进程派生的进程则被视为单元的主进程(如果可以确定的话)，对于其他类型的服务单元，这是不同的，在这些服务单元中，<code>ExecStart=</code>的管理器分叉的进程始终是主进程本身，一个服务单元由零个或一个主进程、零个或一个控制进程以及任意数量的附加进程组成，然而并不是所有的单元类型都管理这些类型的流程，例如对于<code>mount</code>单元，定义了控制进程即<code>/bin/mount</code>和<code>/bin/umount</code>的调用，但没有定义主进程，如果省略，则默认为<code>all</code>。</li><li><code>-s, --signal=</code>: 与<code>kill</code>一起使用时，选择要发送到选定进程的信号，必须是众所周知的信号说明符之一，如<code>SIGTERM</code>、<code>SIGINT</code>或<code>SIGSTOP</code>，如果省略，则默认为<code>SIGTERM</code>。</li><li><code>-f, --force</code>: 与<code>enable</code>一起使用时，覆盖任何现有的冲突符号链接，当与<code>halt</code>、<code>poweroff</code>、<code>reboot</code>或<code>kexec</code>一起使用时，执行所选操作而不关闭所有单元，但是所有进程都将被强制终止，所有文件系统都以只读方式卸载或重新装载，因此这是一个要求立即重启的激烈但相对安全的选择，如果为这些操作指定了<code>--force</code>两次，它们将立即执行，而不会终止任何进程或卸载任何文件系统，警告在这些操作中指定<code>--force</code>两次可能会导致数据丢失。</li><li><code>--root=</code>: 当与<code>enable/disable/is enabled</code>和相关命令一起使用时，在查找单位文件时使用备用根路径。</li><li><code>--runtime</code>: 当与<code>enable</code>、<code>disable</code>和相关命令一起使用时，仅临时进行更改，以便在下次重新启动时丢失更改，这将产生这样的效果，更改不是在<code>/etc</code>的子目录中进行的，而是在<code>/run</code>中进行的，具有相同的即时效果，但是由于后者在重新启动时丢失，因此更改也会丢失，类似地，当与<code>set</code>属性一起使用时，仅临时进行更改，以便在下次重新启动时丢失更改。</li><li><code>--preset-mode=</code>: 取<code>full</code>默认、<code>enable only</code>、<code>disable only</code>之一，当与预设或预设所有命令一起使用时，控制是根据预设规则禁用和启用单元，还是仅启用或仅禁用单元。</li><li><code>-n, --lines=</code>: 与<code>status</code>一起使用时，控制要显示的日志行数，从最近的行开始计算，接受一个正整数参数，默认为<code>10</code>。</li><li><code>-o, --output=</code>: 与状态一起使用时，控制显示的日记账分录的格式，有关可用选项，请参见<code>journalctl</code>，默认为<code>short</code>。</li><li><code>--plain</code>: 与<code>list-dependencies</code>列表依赖项一起使用时，输出将打印为列表而不是树。</li><li><code>-H, --host=</code>: 远程执行操作，指定要连接的主机名，或用户名和主机名之间用<code>@</code>分隔，主机名的后缀可以是一个容器名，用<code>:</code>分隔，它直接连接到指定主机上的特定容器，这将使用<code>SSH</code>与远程<code>machinemanager</code>实例通信，容器名称可以用<code>machinectl-H HOST</code>枚举。</li><li><code>-M, --machine=</code>: 在本地容器上执行操作，指定要连接到的容器名称。</li><li><code>-h, --help</code>: 输出帮助信息。</li><li><code>--version</code>: 输出版本信息。</li></ul><h3 id="unit-commands" tabindex="-1"><a class="header-anchor" href="#unit-commands"><span>Unit Commands</span></a></h3><ul><li><code>list-units [PATTERN...]</code>: 列出已知单位，受<code>-t</code>规定的限制，如果指定了一个或多个模式，则只显示与其中一个模式匹配的单元，这是默认<code>PATTERN</code>。</li><li><code>list-sockets [PATTERN...]</code>: 列出按侦听地址排序的套接字单元。如果指定了一个或多个模式，则仅显示与其中一个模式匹配的套接字单元。</li><li><code>list-timers [PATTERN...]</code>: 列出计时器单位，按它们下一次经过的时间排序，如果指定了一个或多个模式，则只显示与其中一个模式匹配的单元。</li><li><code>start PATTERN...</code>: 启动(激活)命令行上指定的一个或多个单元，请注意全局模式在当前已加载的单位列表上运行，通常不处于活动状态且未处于故障状态的单元不会被加载，并且不会通过任何模式进行匹配，另外在实例化单元的情况下，<code>systemd</code>通常在启动实例之前才知道实例名称，因此将<code>glob</code>模式与<code>start</code>一起使用具有有限的用途。</li><li><code>stop PATTERN...</code>: 停止(停用)命令行上指定的一个或多个单位。</li><li><code>reload PATTERN...</code>: 要求命令行上列出的所有单位重新加载其配置，请注意这将重新加载特定于服务的配置，而不是<code>systemd</code>的单元配置文件，如果希望<code>systemd</code>重新加载单元的配置文件，请使用<code>daemon reload</code>命令，例如对于<code>Apache</code>的示例，这将重新加载<code>Apache</code>的<code>httpd.conf</code>文件在<code>web</code>服务器中，而不是<code>apache.service</code>服务系统单位文件，此命令不应与守护进程重载或加载命令混淆。</li><li><code>restart PATTERN...</code>: 重新启动命令行中指定的一个或多个单元，如果这些单元还没有运行，它们将被启动。</li><li><code>try-restart PATTERN...</code>: 如果一个或多个单元正在运行，则重新启动命令行中指定的一个或多个单元，如果单元没有运行，则不会执行任何操作，注意，为了与<code>Red Hat init</code>脚本兼容，<code>condrestart</code>等价于这个命令。</li><li><code>reload-or-restart PATTERN...</code>: 如果单位支持的话则重新加载，否则，重新启动它们，如果这些单元还没有运行，它们将被启动。</li><li><code>reload-or-try-restart PATTERN...</code>: 如果单位支持的话则重新加载，否则，重新启动它们。如果这些单元没有运行，这将不起任何作用，注意，为了与<code>SysV init</code>脚本兼容，<code>force reload</code>相当于这个命令。</li><li><code>isolate NAME</code>: 启动命令行上指定的单元及其依赖项，并停止所有其他单元，这类似于在传统的<code>init</code>系统中更改运行级别，<code>isolate</code>命令将立即停止新单元中未启用的进程，可能包括当前使用的图形环境或终端，请注意，这只允许在启用<code>AllowIsolate=</code>的单元上使用，详情请参见<code>systemd.unit</code>。</li><li><code>kill PATTERN...</code>: 向设备的一个或多个进程发送信号，使用<code>--kill who=</code>选择要终止的进程，使用<code>--signal=</code>选择要发送的信号。</li><li><code>is-active PATTERN...</code>: 检查是否有任何指定的单元处于活动状态，即正在运行，如果至少有一个处于活动状态，则返回退出代码0，否则返回非零，除非指定<code>--quiet</code>，否则这也会将当前单位状态打印到标准输出。</li><li><code>is-failed PATTERN...</code>: 检查指定的单元是否处于失败状态，如果至少有一个失败，则返回退出代码<code>0</code>，否则返回非零，除非指定<code>--quiet</code>，否则这也会将当前单位状态打印到标准输出。</li><li><code>status [PATTERN...|PID...]]</code>: 显示关于一个或多个单元的简要运行时状态信息，然后是来自日志的最新日志数据，如果未指定单位，则显示系统状态，如果与<code>--all</code>组合，也显示所有单元的状态(受<code>-t</code>指定的限制)，如果传入<code>PID</code>，则显示该进程所属的单元信息，这个函数的目的是生成人类可读的输出，如果您正在寻找计算机可解析的输出，请使用<code>show</code>代替，默认情况下，这个函数只显示<code>10</code>行输出和椭圆线以适应终端窗口，这可以用<code>--lines</code>和<code>--full</code>来更改，此外<code>journalctl --unit=NAME</code>或<code>journalctl --user-unit=NAME</code>对消息使用了类似的过滤器，可能更方便。</li><li><code>show [PATTERN...|JOB...]</code>: 显示一个或多个单元、作业或管理器本身的属性，如果未指定参数，则将显示管理器的属性，默认情况下，将禁止空属性。用<code>--all</code>的来显示所有属性，要选择要显示的特定属性，请使用<code>--property=</code>，此命令用于需要计算机可分析输出时，如果要查找格式化的可读输出，请使用<code>status</code>。</li><li><code>cat PATTERN...</code>: 显示一个或多个单元的备份文件，打印单元的<code>fragment</code>和<code>drop-ins</code>(源文件)，每个文件前面都有一个注释，其中包含文件名。</li><li><code>set-property NAME ASSIGNMENT...</code>: 在支持的运行时设置指定的单元属性，这允许在运行时更改配置参数属性，例如资源控制设置，并非所有属性都可以在运行时更改，但许多资源控制设置<code>systemd.resource-control</code>可以，更改会立即应用，并存储在磁盘上以备将来引导，除非传递了<code>--runtime</code>，在这种情况下，设置只应用到下一次重新启动，属性赋值的语法与单位文件中赋值的语法非常相似。例如<code>systemctl set-property foobar.service CPUShares=777</code>，请注意，此命令允许同时更改多个属性，这比单独设置属性更好，与单元文件配置设置一样，将空列表指定给列表参数将重置列表。</li><li><code>help PATTERN...|PID...</code>: 显示一个或多个单元的手册页(如果可用)，如果给定<code>PID</code>，则会显示流程所属单元的手册页。</li><li><code>reset-failed [PATTERN...]</code>: 重置指定单元的<code>fail</code>状态，或者如果没有传递单元名称，则重置所有单元的状态，当一个单元以某种方式发生故障(即进程带非零错误代码退出、异常终止或超时)时，它将自动进入<code>fail</code>状态，并记录其退出代码和状态供管理员自查，直到使用此命令重新启动或重设服务。</li><li><code>list-dependencies [NAME]</code>: 显示指定单位的所需单位和所需单位，如果没有指定单位，目标单位会递归展开，当传递<code>--all</code>时，所有其他单元也会递归展开。</li></ul><h3 id="unit-file-commands" tabindex="-1"><a class="header-anchor" href="#unit-file-commands"><span>Unit File Commands</span></a></h3><ul><li><code>list-unit-files [PATTERN...]</code>: 列出已安装的单元文件，如果指定了一个或多个模式，则只显示其文件名(只是路径的最后一个组件)与其中一个匹配的单元。</li><li><code>enable NAME...</code>: 根据命令行上的指定，启用一个或多个单位文件或单位文件实例，这将创建许多符号链接，这些符号链接编码在单元文件的<code>[Install]</code>部分，创建符号链接后，将重新加载<code>systemd</code>配置(以相当于<code>daemon reload</code>的方式)，以确保立即考虑更改，请注意，这不会同时启动任何启用的单元。如果需要，必须为装置调用单独的启动命令，另请注意，在启用实例的情况下，将在安装位置创建名为<code>same as instances</code>的符号链接，但是它们都指向相同的模板单元文件，此命令将打印执行的操作，这个输出可以通过传递<code>--quiet</code>来抑制，请注意，此操作仅为单元创建建议的符号链接，虽然此命令是操作单元配置目录的推荐方法，但管理员可以通过在目录中放置或删除符号链接来手动进行其他更改，这对于创建与建议的默认安装不同的配置特别有用，在这种情况下，管理员必须确保根据需要手动调用<code>daemon reload</code>，以确保将更改考虑在内。启动单元不应与启动(激活)单元混淆，就像启动命令所做的那样，启用和启动装置是正交的，装置可以不启动就启用，也可以不启动就启动，启用只需将单元挂接到各种建议的位置，例如，这样在引导时或插入特定类型的硬件时，单元就会自动启动。启动实际上会生成守护进程(对于服务单元)，或者绑定套接字(对于套接字单元)等等。根据是否指定了<code>--system</code>、<code>--user</code>、<code>--runtime</code>或<code>--global</code>，这将为系统、仅为调用用户、仅为系统的此引导、所有用户的所有将来登录或仅为此引导启用该单元，请注意，在最后一种情况下，不会重新加载<code>systemd</code>守护程序配置。</li><li><code>disable NAME...</code>: 禁用一个或多个单位，这将从单元配置目录中删除指向指定单元文件的所有符号链接，从而撤消<code>enable</code>所做的更改，但是请注意，这将删除指向单元文件的所有符号链接(即包括手动添加)，而不仅仅是那些由<code>enable</code>实际创建的符号链接，在完成单元的禁用之后，此调用隐式地重新加载<code>systemd</code>守护程序配置，请注意，此命令不会隐式停止正在禁用的单元，如果需要这样做，随后应执行一个额外的停止命令，此命令将打印执行的操作，这个输出可以通过传递<code>--quiet</code>来抑制，这个命令以与<code>enable</code>类似的方式接受<code>--system</code>、<code>--user</code>、<code>--runtime</code>和<code>--global</code>。</li><li><code>is-enabled NAME...</code>: 检查是否启用了任何指定的单位文件(如启用)，如果至少启用了一个，则返回退出代码<code>0</code>，否则返回非零，打印当前启用状态<code>enabled</code>、<code>enabled-runtime</code>、<code>linked</code>、<code>linked-runtime</code>、<code>masked</code>、<code>masked-runtime</code>、<code>static</code>、<code>disabled</code>，要禁止此输出，请使用<code>--quiet</code>。</li><li><code>reenable NAME...</code>: 按命令行上的指定，重新启用一个或多个单位文件，这是<code>disable</code>和<code>enable</code>的组合，用于将启用单元的符号链接重置为单元文件<code>[Install]</code>部分中配置的默认值。</li><li><code>preset NAME...</code>: 将命令行中指定的一个或多个单位文件重置为预设策略文件中配置的默认值，这与<code>disable</code>或<code>enable</code>具有相同的效果，具体取决于单位在预设文件中的列出方式。使用<code>--preset-mode=</code>控制是启用和禁用单元，还是仅启用或仅禁用单元，有关预设策略格式的详细信息，请参阅<code>systemd.preset</code>，有关预设概念的更多信息，请参阅<code>Presetm</code>文档。</li><li><code>preset-all</code>: 将所有已安装的单元文件重置为预设策略文件中配置的默认值，使用<code>--preset mode=</code>控制是启用和禁用单元，还是仅启用或仅禁用单元。</li><li><code>mask NAME...</code>: 根据命令行上的指定，屏蔽一个或多个单位文件，这将把这些单元链接到<code>/dev/null</code>，使它们无法启动，这是一个更强大的版本的禁用，因为它禁止各种激活的单位，包括手动激活，小心使用此选项，这允许<code>--runtime</code>选项在下次重新启动系统之前临时屏蔽。</li><li><code>link FILENAME...</code>: 将不在单位文件搜索路径中的单位文件链接到单位文件搜索路径，这需要到单位文件的绝对路径，使用<code>disable</code>可以撤消此操作的效果，此命令的效果是，单位文件可用于<code>start</code>和其他命令，尽管它没有直接安装在单位搜索路径中。</li><li><code>get-default</code>: 获取通过<code>default.target</code>链接指定的默认目标。</li><li><code>set-default NAME</code>: 设置默认目标启动，命令将<code>default.target</code>链接到给定的单位。</li></ul><h3 id="machine-commands" tabindex="-1"><a class="header-anchor" href="#machine-commands"><span>Machine Commands</span></a></h3><ul><li><code>list-machines [PATTERN...]</code>: 列出主机和所有运行的本地容器及其状态，如果指定了一个或多个模式，则只显示与其中一个模式匹配的容器。</li></ul><h3 id="job-commands" tabindex="-1"><a class="header-anchor" href="#job-commands"><span>Job Commands</span></a></h3><ul><li><code>list-jobs [PATTERN...]</code>: 列出正在进行的作业，如果指定了一个或多个模式，则仅显示与其中一个模式匹配的单元的作业。</li><li><code>cancel JOB...</code>: 取消命令行上由数字作业ID指定的一个或多个作业，如果未指定作业<code>ID</code>，请取消所有挂起的作业。</li></ul><h3 id="snapshot-commands" tabindex="-1"><a class="header-anchor" href="#snapshot-commands"><span>Snapshot Commands</span></a></h3><ul><li><code>snapshot [NAME]</code>: 创建快照，如果指定了快照名称，则新快照将以该名称命名，如果未指定任何名称，则生成自动快照名称，在这两种情况下，所使用的快照名称都打印到标准输出，除非指定了<code>--quiet</code>，快照是指<code>systemd manager</code>的已保存状态，它本身作为一个单元来实现，这个单元是用这个命令动态生成的，并且依赖于当时所有活动的单元，稍后，用户可以使用快照单元上的隔离命令返回到该状态，快照仅用于保存和还原正在运行或已停止的单元，它们不保存<code>/</code>还原任何其他状态，快照是动态的，在重新启动时丢失。</li><li><code>delete PATTERN...</code>: 删除之前用<code>snapshot</code>创建的快照。</li></ul><h3 id="environment-commands" tabindex="-1"><a class="header-anchor" href="#environment-commands"><span>Environment Commands</span></a></h3><ul><li><code>show-environment</code>: 转储<code>systemd manager</code>环境块，环境块将以适合源代码到<code>shell</code>脚本的直接形式转储，此环境块将传递给管理器生成的所有进程。</li><li><code>set-environment VARIABLE=VALUE...</code>: 按照命令行上的指定，设置一个或多个<code>systemd manager</code>环境变量。</li><li><code>unset-environment VARIABLE...</code>: 取消设置一个或多个<code>systemd manager</code>环境变量，如果只指定了变量名，则无论其值如何，都将删除该变量名，如果指定了一个变量和一个值，则仅当该变量具有指定的值时才会删除该变量。</li><li><code>import-environment VARIABLE...</code>: 将客户机上设置的所有、一个或多个环境变量导入<code>systemd manager</code>环境块，如果没有传递任何参数，则导入整个环境块，否则，应传递一个或多个环境变量名的列表，然后将其客户端值导入到管理器的环境块中。</li></ul><h3 id="manager-lifecycle-commands" tabindex="-1"><a class="header-anchor" href="#manager-lifecycle-commands"><span>Manager Lifecycle Commands</span></a></h3><ul><li><code>daemon-reload</code>: 重新加载<code>systemd manager</code>配置，这将重新加载所有单元文件并重新创建整个依赖关系树，在重新加载守护进程时，<code>systemd</code>代表用户配置侦听的所有套接字都将保持可访问状态，此命令不应与<code>load</code>或<code>reload</code>命令混淆。</li><li><code>daemon-reexec</code>: 重新执行<code>systemd manager</code>，这将序列化管理器状态，重新执行进程并再次反序列化状态，除了调试和包升级之外，这个命令没有什么用处，有时，作为一个重载守护进程，它可能会有所帮助，当守护进程被重新执行时，代表用户配置侦听的所有套接字<code>systemd</code>都将保持可访问状态。</li></ul><h3 id="system-commands" tabindex="-1"><a class="header-anchor" href="#system-commands"><span>System Commands</span></a></h3><ul><li><code>is-system-running</code>: 检查系统是否正在运行，当系统完全启动并运行时，返回<code>success</code>，这意味着不处于启动、关闭或维护模式，否则返回失败，此外，当前状态以短字符串形式打印到标准输出，使用<code>--quiet</code>可以抑制此状态字符串的输出。</li><li><code>default</code>: 进入默认模式，这主要等效于隔离<code>default.target</code>。</li><li><code>rescue</code>: 进入救援模式，这主要相当于隔离<code>rescue.target</code>，但也会向所有用户打印墙消息。</li><li><code>emergency</code>: 进入紧急模式，这在大多数情况下等效于隔离<code>Emergency.target</code>，但也会向所有用户显示隔离墙消息。</li><li><code>halt</code>: 关闭并停止系统，这主要等效于启动<code>halt.target --irreversible</code>，但还会向所有用户显示一条墙消息，如果与<code>--force</code>结合使用，则将跳过所有正在运行的服务的关闭，但是将终止所有进程，并且将所有文件系统卸载或以只读方式装载，然后立即停止系统，如果两次指定<code>--force</code>，将立即执行该操作，而不会终止任何进程或卸载任何文件系统，这可能会导致数据丢失。</li><li><code>poweroff</code>: 关闭并关闭系统电源，这主要等效于启动<code>poweroff.target --irreversible</code>，但还会向所有用户显示一条墙消息，如果与<code>--force</code>结合使用，将跳过所有正在运行的服务的关闭，但是将终止所有进程，并且将所有文件系统卸载或以只读方式装载，然后立即关闭电源，如果两次指定<code>--force</code>，将立即执行该操作，而不会终止任何进程或卸载任何文件系统，这可能会导致数据丢失。</li><li><code>reboot [arg]</code>: 关闭并重新启动系统，这主要等同于启动<code>reboot.target --irreversible</code>，但还会向所有用户显示一条墙消息，如果与<code>--force</code>结合使用，将跳过所有正在运行的服务的关闭，但是将终止所有进程，并且将所有文件系统卸载或以只读方式装载，然后立即重新引导，如果两次指定<code>--force</code>，将立即执行该操作，而不会终止任何进程或卸载任何文件系统，这可能会导致数据丢失，如果给出了可选参数<code>arg</code>，它将作为可选参数传递给<code>reboot</code>系统调用，该值是体系结构和固件特定的，例如，<code>recovery</code>可用于触发系统恢复，而<code>fota</code>可用于触发<code>firmware over the air</code>更新。</li><li><code>kexec</code>: 通过<code>kexec</code>关闭并重新启动系统，这主要等效于启动<code>kexec.target --irreversible</code>，但还会向所有用户显示一条墙消息，如果与<code>--force</code>结合使用，则将跳过所有正在运行的服务的关闭，但是将终止所有进程，并且将所有文件系统卸载或以只读方式装载，然后立即重新引导。</li><li><code>exit</code>: 要求系统管理员退出，仅用户服务管理器支持此功能，即与<code>--user</code>选项结合使用，否则将失败。</li><li><code>suspend</code>: 挂起系统，这将触发特殊的<code>suspend.target</code>目标的激活。</li><li><code>hibernate</code>: 休眠系统，这将触发特殊的<code>hibernate.target</code>目标的激活。</li><li><code>hybrid-sleep</code>: 休眠并挂起系统。这将触发特殊的<code>hybrid-sleep.target</code>目标的激活。</li><li><code>switch-root ROOT [INIT]</code>: 切换到另一个根目录，并在其下执行新的系统管理器进程，这旨在用于初始<code>RAM</code>磁盘<code>initrd</code>，并将从<code>initrd</code>的系统管理器进程，也称为<code>init</code>进程，过渡到主系统管理器进程，该调用有两个参数，要成为新根目录的目录，以及要在其下以<code>PID 1</code>执行的新系统管理器二进制文件的路径，如果省略后者或为空字符串，则将自动生成<code>systemd</code>二进制文件搜索并用作<code>init</code>，如果省略了系统管理器路径或等于空字符串，则将<code>initrd</code>的系统管理器进程的状态传递给主系统管理器，这允许稍后对<code>initrd</code>引导中涉及的服务的状态进行自查。</li></ul><h2 id="unit文件配置" tabindex="-1"><a class="header-anchor" href="#unit文件配置"><span>UNIT文件配置</span></a></h2><h3 id="unit文件类型" tabindex="-1"><a class="header-anchor" href="#unit文件类型"><span>UNIT文件类型</span></a></h3><p><code>Unit</code>文件统一了过去各种不同的系统资源配置格式，例如服务的启动、停止、定时任务、设备自动挂载、网络配置、设备配置、虚拟内存配置等，而<code>Systemd</code>通过不同的通过文件的后缀名来区分这些配置文件，<code>.service</code>文件便是其中最常用的一种，下面是<code>Systemd</code>所支持的<code>12</code>种<code>Unit</code>文件类型。</p><ul><li><code>.automount</code>: 用于控制自动挂载文件系统，自动挂载即当某一目录被访问时系统自动挂载该目录，这类<code>unit</code>取代了传统<code>Linux</code>系统的<code>autofs</code>相应功能。</li><li><code>.device</code>: 对应<code>/dev</code>目录下设备，主要用于定义设备之间的依赖关系。</li><li><code>.mount</code>: 定义系统结构层次中的一个挂载点，可以替代过去的<code>/etc/fstab</code>配置文件。</li><li><code>.path</code>: 用于监控指定目录变化，并触发其他<code>unit</code>运行。</li><li><code>.scope</code>: 这类<code>unit</code>文件不是用户创建的，而是<code>Systemd</code>运行时自己产生的，描述一些系统服务的分组信息。</li><li><code>.service</code>: 封装守护进程的启动、停止、重启和重载等操作，是最常见的一种<code>unit</code>类型。</li><li><code>.slice</code>: 用于描述<code>cgroup</code>的一些信息，极少使用到，一般用户就忽略它吧。</li><li><code>.snapshot</code>: 这种<code>unit</code>其实是<code>systemctl snapshot</code>命令创建的一个描述<code>Systemd unit</code>运行状态的快照。</li><li><code>.socket</code>: 监控系统或互联网中的<code>socket</code>消息，用于实现基于网络数据自动触发服务启动。</li><li><code>.swap</code>: 定义一个用于做虚拟内存的交换分区。</li><li><code>.target</code>: 用于对<code>unit</code>进行逻辑分组，引导其他<code>unit</code>的执行，它替代了<code>SysV</code>中运行级别的作用，并提供更灵活的基于特定设备事件的启动方式，例如<code>multi-user.target</code>相当于过去的运行级别<code>5</code>，而<code>bluetooth.target</code>在有蓝牙设备接入时就会被触发。</li><li><code>.timer</code>: 封装由<code>system</code>的里面由时间触发的动作, 替代了<code>crontab</code>的功能。</li></ul><h3 id="配置目录" tabindex="-1"><a class="header-anchor" href="#配置目录"><span>配置目录</span></a></h3><p><code>Unit</code>文件按照<code>Systemd</code>约定，应该被放置在指定的<code>3</code>个系统目录之一，这<code>3</code>个目录是有优先级的，在下面指定的位置优先级依次递减，因此在几个目录中有同名文件的时候，只有优先级最高的目录里的那个会被使用。</p><ul><li><code>/etc/systemd/system</code>: 系统或用户提供的配置文件。</li><li><code>/run/systemd/system</code>: 软件运行时生成的配置文件。</li><li><code>/usr/lib/systemd/system</code>: 系统或第三方软件安装时添加的配置文件。</li></ul><h3 id="service文件字段" tabindex="-1"><a class="header-anchor" href="#service文件字段"><span>Service文件字段</span></a></h3><p>通常我们只需要配置<code>.service</code>文件即可，<code>.service</code>分为三个字符。</p><h4 id="unit段" tabindex="-1"><a class="header-anchor" href="#unit段"><span>Unit段</span></a></h4><p>这些配置中，除了<code>Description</code>外，都能够被添加多次，例如<code>After</code>参数可以使用空格分隔指定所有值，也可以使用多个<code>After</code>参数，在每行参数中指定一个值。</p><ul><li><code>Description</code>: 一段描述这个<code>Unit</code>文件的文字，通常只是简短的一句话。</li><li><code>Documentation</code>: 指定服务的文档，可以是一个或多个文档的<code>URL</code>路径。</li><li><code>Requires</code>: 依赖的其他<code>Unit</code>列表，列在其中的<code>Unit</code>模块会在这个服务启动的同时被启动，并且如果其中有任意一个服务启动失败，这个服务也会被终止。</li><li><code>Wants</code>: 与<code>Requires</code>相似，但只是在被配置的这个<code>Unit</code>启动时，触发启动列出的每个 <code>Unit</code>模块，而不去考虑这些模块启动是否成功。</li><li><code>After</code>: 与<code>Requires</code>相似，但会在后面列出的所有模块全部启动完成以后，才会启动当前的服务。</li><li><code>Before</code>: 与<code>After</code>相反，在启动指定的任一个模块之前，都会首先确保当前服务已经运行。</li><li><code>BindsTo</code>: 与<code>Requires</code>相似，但是一种更强的关联，启动这个服务时会同时启动列出的所有模块，当有模块启动失败时终止当前服务，反之，只要列出的模块全部启动以后，也会自动启动当前服务。并且这些模块中有任意一个出现意外结束或重启，这个服务会跟着终止或重启。</li><li><code>PartOf</code>: 这是一个<code>BindTo</code>作用的子集，仅在列出的任何模块失败或重启时，终止或重启当前服务，而不会随列出模块的启动而启动。</li><li><code>OnFailure</code>: 当这个模块启动失败时，就自动启动列出的每个模块。</li><li><code>Conflicts</code>: 与这个模块有冲突的模块，如果列出模块中有已经在运行的，这个服务就不能启动，反之亦然。</li></ul><h4 id="install段" tabindex="-1"><a class="header-anchor" href="#install段"><span>Install段</span></a></h4><p>这个段中的配置与<code>Unit</code>有几分相似，但是这部分配置需要通过<code>systemctl enable</code>命令来激活，并且可以通过<code>systemctl disable</code>命令禁用，另外这部分配置的目标模块通常是特定启动级别的<code>.target</code>文件，用来使得服务在系统启动时自动运行。</p><ul><li><code>WantedBy</code>: 和前面的<code>Wants</code>作用相似，只是后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。</li><li><code>RequiredBy</code>: 和前面的<code>Requires</code>作用相似，同样后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。</li><li><code>Also</code>: 当这个服务被<code>enable/disable</code>时，将自动<code>enable/disable</code>后面列出的每个模块。</li></ul><h4 id="service段" tabindex="-1"><a class="header-anchor" href="#service段"><span>Service段</span></a></h4><p>这个段是<code>.service</code>文件独有的，也是对于服务配置最重要的部分，这部分的配置选项非常多，主要分为服务生命周期控制和服务上下文配置两个方面，下面是一些常用的配置，另外还有一些限制特定服务可用的系统资源量，例如<code>CPU</code>、程序堆栈，文件句柄数量，子进程数量等等，可参考<code>Linux</code>文档资源配额。</p><ul><li><code>Type</code>: 服务的类型，常用的有<code>simple</code>和<code>forking</code>，默认的<code>simple</code>类型可以适应于绝大多数的场景，因此一般可以忽略这个参数的配置，而如果服务程序启动后会通过<code>fork</code>系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将<code>Type</code>的值设置为<code>forking</code>，否则<code>systemd</code>将不会跟踪子进程的行为，而认为服务已经退出。</li><li><code>RemainAfterExit</code>: 值为<code>true</code>或<code>false</code>，也可以写<code>yes</code>或<code>no</code>，默认为<code>false</code>，当配置值为<code>true</code>时，<code>systemd</code>只会负责启动服务进程，之后即便服务进程退出了，<code>systemd</code>仍然会认为这个服务是在运行中的，这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出然后等待消息按需启动的特殊类型服务使用。</li><li><code>ExecStart</code>: 这个参数是几乎每个<code>.service</code>文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次。</li><li><code>ExecStartPre</code>: 指定在启动执行<code>ExecStart</code>的命令前的准备工作，可以有多个，所有命令会按照文件中书写的顺序依次被执行。</li><li><code>ExecStartPost</code>: 指定在启动执行<code>ExecStart</code>的命令后的收尾工作，也可以有多个。</li><li><code>TimeoutStartSec</code>: 启动服务时的等待的秒数，如果超过这个时间服务仍然没有执行完所有的启动命令，则<code>systemd</code>会认为服务自动失败，这一配置对于使用<code>Docker</code>容器托管的应用可能十分重要，由于<code>Docker</code>第一次运行时可以能会需要从网络下载服务的镜像文件，因此造成比较严重的延时，容易被<code>systemd</code>误判为启动失败而杀死，通常对于这种服务，需要将<code>TimeoutStartSec</code>的值指定为<code>0</code>，从而关闭超时检测。</li><li><code>ExecStop</code>: 停止服务所需要执行的主要命令。</li><li><code>ExecStopPost</code>: 指定在<code>ExecStop</code>命令执行后的收尾工作，也可以有多个。</li><li><code>TimeoutStopSec</code>: 停止服务时的等待的秒数，如果超过这个时间服务仍然没有停止，<code>systemd</code>会使用<code>SIGKILL</code>信号强行杀死服务的进程。</li><li><code>Restart</code>: 这个值用于指定在什么情况下需要重启服务进程，常用的值有<code>no</code>、<code>on-success</code>、<code>on-failure</code>、<code>on-abnormal</code>、<code>on-abort</code>和<code>always</code>，默认值为<code>no</code>，即不会自动重启服务。</li><li><code>RestartSec</code>: 如果服务需要被重启，这个参数的值为服务被重启前的等待秒数。</li><li><code>ExecReload</code>: 重新加载服务所需执行的主要命令。</li><li><code>Environment</code>: 为服务添加环境变量。</li><li><code>EnvironmentFile</code>: 指定加载一个包含服务所需的环境变量列表的文件，文件中的每一行都是一个环境变量的定义。</li><li><code>Nice</code>: 服务的进程优先级，值越小优先级越高，默认为<code>0</code>，<code>-20</code>为最高优先级，<code>19</code>为最低优先级。</li><li><code>WorkingDirectory</code>: 指定服务的工作目录。</li><li><code>RootDirectory</code>: 指定服务进程的根目录<code>/</code>，如果配置了这个参数后，服务将无法访问指定目录以外的任何文件。</li><li><code>User</code>: 指定运行服务的用户，会影响服务对本地文件系统的读写执行权限。</li><li><code>Group</code>: 指定运行服务的用户组，会影响服务对本地文件系统的访问权限。</li><li><code>StartLimitIntervalSec</code>: 属于设置单元的启动频率限制，用于设置时长，默认情况下，一个单元在<code>10</code>秒内最多允许启动<code>5</code>次。</li><li><code>StartLimitBurst</code>: 属于设置单元的启动频率限制，用于设置在一段给定的时长内，最多允许启动多少次，默认情况下，一个单元在<code>10</code>秒内最多允许启动<code>5</code>次。</li></ul><h4 id="文件示例" tabindex="-1"><a class="header-anchor" href="#文件示例"><span>文件示例</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[Unit]
Description=OpenBSD Secure Shell server
After=network.target auditd.service
ConditionPathExists=!/etc/ssh/sshd_not_to_be_run

[Service]
EnvironmentFile=-/etc/default/ssh
ExecStartPre=/usr/sbin/sshd -t
ExecStart=/usr/sbin/sshd -D $SSHD_OPTS
ExecReload=/usr/sbin/sshd -t
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
Type=notify
RuntimeDirectory=sshd
RuntimeDirectoryMode=0755

[Install]
WantedBy=multi-user.target
Alias=sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>开机运行服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询服务是否开机启动。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl is-enabled nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取消开机运行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl disable nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl start nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl stop nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新加载服务配置文件，修改配置文件后需要首先执行<code>systemctl daemon-reload</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl reload nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询服务运行状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl status nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示启动失败的服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token parameter variable">--failed</span>
systemctl list-units <span class="token parameter variable">--state</span> failed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重置单元的启动频率计数器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl reset-failed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新加载所有被修改过的服务配置，否则配置不会生效，当然实际上该命令还会完成很多事情，例如重新生成依赖树。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出所有单元。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl list-units
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有单元状态概览。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看已激活的服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl list-units <span class="token parameter variable">-t</span> <span class="token function">service</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看所有已安装服务。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl list-unit-files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查<code>nginx</code>服务的所有配置细节。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl show nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取<code>nginx</code>服务的依赖性列表。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl list-dependencies nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看环境变量。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl show-environment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启系统。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭系统。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl poweroff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>CPU</code>停止工作。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token function">halt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>暂停系统。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl <span class="token function">suspend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让系统进入冬眠状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl hibernate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让系统进入交互式休眠状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl hybrid-sleep
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动进入救援状态，即单用户状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl rescue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://www.cnblogs.com/tsdxdx/p/7288490.html
https://www.cnblogs.com/chjbbs/p/6288592.html
https://www.geeksforgeeks.org/systemctl-in-unix/
http://www.jinbuguo.com/systemd/systemd.unit.html
https://blog.csdn.net/m0_38023255/article/details/78757655
https://www.commandlinux.com/man-page/man1/systemctl.1.html
http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98),l=[s];function a(n,t){return d(),c("div",null,l)}const u=e(i,[["render",a],["__file","systemctl命令.html.vue"]]),h=JSON.parse('{"path":"/MacOS/Terminal/systemctl%E5%91%BD%E4%BB%A4.html","title":"systemctl命令","lang":"zh-CN","frontmatter":{"description":"systemctl命令 Systemd是一个命令组，涉及到系统管理的方方面面，而systemctl是Systemd的主命令，用于管理系统。 描述 在历史上Linux的启动一直采用init进程，这种方法有两个缺点，一是启动时间长，init进程是串行启动，只有前一个进程启动完，才会启动下一个进程，二是启动脚本复杂，init进程只是执行启动脚本，不管其他事情...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/systemctl%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"systemctl命令"}],["meta",{"property":"og:description","content":"systemctl命令 Systemd是一个命令组，涉及到系统管理的方方面面，而systemctl是Systemd的主命令，用于管理系统。 描述 在历史上Linux的启动一直采用init进程，这种方法有两个缺点，一是启动时间长，init进程是串行启动，只有前一个进程启动完，才会启动下一个进程，二是启动脚本复杂，init进程只是执行启动脚本，不管其他事情..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"systemctl命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[{"level":3,"title":"OPTIONS","slug":"options","link":"#options","children":[]},{"level":3,"title":"Unit Commands","slug":"unit-commands","link":"#unit-commands","children":[]},{"level":3,"title":"Unit File Commands","slug":"unit-file-commands","link":"#unit-file-commands","children":[]},{"level":3,"title":"Machine Commands","slug":"machine-commands","link":"#machine-commands","children":[]},{"level":3,"title":"Job Commands","slug":"job-commands","link":"#job-commands","children":[]},{"level":3,"title":"Snapshot Commands","slug":"snapshot-commands","link":"#snapshot-commands","children":[]},{"level":3,"title":"Environment Commands","slug":"environment-commands","link":"#environment-commands","children":[]},{"level":3,"title":"Manager Lifecycle Commands","slug":"manager-lifecycle-commands","link":"#manager-lifecycle-commands","children":[]},{"level":3,"title":"System Commands","slug":"system-commands","link":"#system-commands","children":[]}]},{"level":2,"title":"UNIT文件配置","slug":"unit文件配置","link":"#unit文件配置","children":[{"level":3,"title":"UNIT文件类型","slug":"unit文件类型","link":"#unit文件类型","children":[]},{"level":3,"title":"配置目录","slug":"配置目录","link":"#配置目录","children":[]},{"level":3,"title":"Service文件字段","slug":"service文件字段","link":"#service文件字段","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":35.41,"words":10622},"filePathRelative":"MacOS/Terminal/systemctl命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{u as comp,h as data};
