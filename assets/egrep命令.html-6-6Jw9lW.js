import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as n,j as o,z as c}from"./app-lp0sOEvl.js";const s={},a=c(`<h1 id="egrep命令" tabindex="-1"><a class="header-anchor" href="#egrep命令"><span>egrep命令</span></a></h1><p><code>egrep</code>命令用于模式搜索，属于<code>grep</code>函数族，工作原理和<code>grep -E</code>一样，其将模式视为扩展正则表达式，并打印出与模式匹配的行，如果有多个文件具有匹配的模式，其还能显示每行的文件名。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>-A NUM, --after-context=NUM</code>: 在匹配行之后打印尾部上下文的<code>NUM</code>行，在相邻的匹配组之间放置包含<code>--</code>的行。</li><li><code>-a, --text</code>: 像处理文本一样处理二进制文件，这相当于<code>--binary files=text</code>选项。</li><li><code>-B NUM, --before-context=NUM</code>: 在匹配行之前打印前导上下文的<code>NUM</code>行，在相邻的匹配组之间放置包含<code>--</code>的行。</li><li><code>-C NUM, --context=NUM</code>: 打印输出上下文的<code>NUM</code>行，在相邻的匹配组之间放置包含<code>--</code>的行。</li><li><code>-b, --byte-offset</code>: 打印输入文件中每行输出之前的字节偏移量。</li><li><code>--binary-files=TYPE</code>: 如果文件的前几个字节指示该文件包含二进制数据，则假定该文件为类型类型。默认情况下，<code>TYPE</code>是<code>binary</code>，<code>grep</code>通常输出一行消息，说明二进制文件匹配，或者不输出消息(如果不匹配)。如果<code>TYPE</code>不匹配，<code>grep</code>假设二进制文件不匹配，这相当于<code>-I</code>选项。如果<code>TYPE</code>是<code>text</code>，<code>grep</code>会像处理文本一样处理二进制文件，这相当于<code>-a</code>选项。此外<code>grep--binary files=text</code>可能会输出二进制垃圾，如果输出是终端，并且终端驱动程序将其中的一些解释为命令，则会产生严重的副作用。</li><li><code>--colour[=WHEN], --color[=WHEN]</code>: 在匹配字符串周围加上标记<code>find in GREP_COLOR</code>环境变量，<code>WHEN</code>可以是<code>never</code>、<code>always</code>、<code>auto</code>。</li><li><code>-c, --count</code>: 禁止正常输出，而是为每个输入文件打印匹配行的计数，使用<code>-v，--invert match</code>选项，计算不匹配的行数。</li><li><code>-D ACTION, --devices=ACTION</code>: 如果输入文件是设备、<code>FIFO</code>或套接字，使用<code>ACTION </code>来处理它。默认情况下，<code>ACTION</code>是<code>read</code>，这意味着设备的读取就像它们是普通文件一样，如果<code>ACTION</code>为<code>skip</code>，则设备将自动跳过。</li><li><code>-d ACTION, --directories=ACTION</code>: 如果输入文件是目录，使用<code>ACTION</code>来处理它。默认情况下，<code>ACTION</code>是<code>read</code>，这意味着目录的读取就像它们是普通文件一样，如果<code>ACTION</code>是<code>skip</code>，则目录将被自动跳过，如果<code>ACTION</code>是递归的，<code>grep</code>将递归地读取每个目录下的所有文件，这相当于<code>-r</code>选项。</li><li><code>-e PATTERN, --regexp=PATTERN</code>: 使用<code>PATTERN</code>作为模式，用于保护以<code>-</code>开头的模式。</li><li><code>-F, --fixed-strings</code>: 将<code>PATTERN</code>解释为固定字符串的列表，用换行符分隔，这些字符串可以匹配。</li><li><code>-P, --perl-regexp</code>: 将<code>PATTERN</code>解释为<code>Perl</code>正则表达式。</li><li><code>-f FILE, --file=FILE</code>: 从<code>FILE</code>获取模式，每行一个，空文件包含零个模式，因此不匹配。</li><li><code>-G, --basic-regexp</code>: 将<code>PATTERN</code>解释为基本正则表达式，这是默认值。</li><li><code>-H, --with-filename</code>: 打印每个匹配项的文件名。</li><li><code>-h, --no-filename</code>: 当搜索多个文件时，禁止在输出中使用文件名前缀。</li><li><code>--help</code>: 显示帮助文件。</li><li><code>-I</code>: 处理二进制文件，就像它不包含匹配数据一样，这相当于<code>--binary-files=without-match</code>选项。</li><li><code>-i, --ignore-case</code>: 忽略<code>PATTERN</code>和输入文件中的大小写区别。</li><li><code>-L, --files-without-match</code>: 禁止正常输出，而是打印通常不会从中打印输出的每个输入文件的名称，扫描将在第一个匹配时停止。</li><li><code>-l, --files-with-matches</code>: 禁止正常输出，而是打印通常从中打印输出的每个输入文件的名称，扫描将在第一个匹配时停止。</li><li><code>-m NUM, --max-count=NUM</code>: 在匹配行数之后停止读取文件。如果输入是来自常规文件的标准输入，并且输出<code>NUM</code>个匹配行，<code>grep</code>确保标准输入在退出之前定位到最后一个匹配行之后，而不管是否存在后续上下文行。这使调用进程能够继续(恢复)搜索，当<code>grep</code>在NUM个匹配行之后停止时，它输出任何后面的上下文行。当<code>-c</code>或<code>--count</code>选项也被使用时，<code>grep</code>不会输出大于<code>NUM</code>的计数。当<code>-v</code>或<code>--invert match</code>选项也被使用时，<code>grep</code>会在输出<code>NUM</code>个不匹配的行之后停止。</li><li><code>--mmap</code>: 如果可能，使用<code>mmap</code>系统调用来读取输入，而不是默认的读取系统调用。在某些情况下，<code>--mmap</code>可以产生更好的性能。但是，如果在<code>grep</code>操作时输入文件收缩，或者发生<code>I/O</code>错误，那么<code>--mmap</code>可能会导致未定义的行为(包括核心转储)。</li><li><code>-n, --line-number</code>: 在输出的每一行前面加上输入文件中的行号。</li><li><code>-o, --only-matching</code>: 只显示匹配行中与模式匹配的部分。</li><li><code>--label=LABEL</code>: 将实际来自标准输入的输入显示为来自文件<code>LABEL</code>的输入。这对于<code>zgrep</code>之类的工具尤其有用，例如<code>gzip -cd foo.gz | grep -H --label = foo</code>。</li><li><code>--line-buffered</code>: 使用行缓冲，这可能会导致性能损失。</li><li><code>-q, --quiet, --silent</code>: 保持安静，不向标准输出写入任何内容。如果找到任何匹配项，即使检测到错误，也立即退出，状态为零。</li><li><code>-R, -r, --recursive</code>: 递归地读取每个目录下的所有文件，这相当于<code>-d recurse</code>选项。</li><li><code>-s, --no-messages</code>: 禁止显示有关不存在或不可读文件的错误消息。</li><li><code>-U, --binary</code>: 将文件视为二进制文件。默认情况下，在<code>MS-DOS</code>和<code>MS Windows</code>下，<code>grep</code>通过查看从文件中读取的第一个<code>32KB</code>的内容来猜测文件类型。如果<code>grep</code>确定文件是文本文件，它将从原始文件内容中删除<code>CR</code>字符(以使带有<code>^</code>和<code>$</code>的正则表达式正常工作)。指定<code>-U</code>会推翻这种猜测，导致读取所有文件并逐字传递给匹配机制，如果文件是一个文本文件，每行末尾都有<code>CR/LF</code>对，这将导致某些正则表达式失败。此选项对<code>MS-DOS</code>和<code>MS Windows</code>以外的平台无效。</li><li><code>-u, --unix-byte-offsets</code>: 报告<code>Unix</code>样式的字节偏移量，此开关使<code>grep</code>报告字节偏移，就好像该文件是<code>Unix</code>样式的文本文件一样，即去除了<code>CR</code>字符。这将产生与在<code>Unix</code>机器上运行<code>grep</code>相同的结果，除非也使用<code>-b</code>选项，否则该选项无效。它对除<code>MS-DOS</code>和<code>MS-Windows</code>以外的平台没有影响。</li><li><code>-V, --version</code>: 输出版本信息。</li><li><code>-v, --invert-match</code>: 反转匹配的意义，以选择不匹配的行。</li><li><code>-w, --word-regexp</code>: 只选择与表单中包含的单词匹配的行。测试是匹配的子串必须在行的开头，或者前面有非单词组成字符，同样，它必须位于行的末尾，或者后跟非单词组成字符。单词组成字符是字母、数字和下划线。</li><li><code>-x, --line-regexp</code>: 仅选择与整行完全匹配的那些匹配项。</li><li><code>-Z, --null</code>: 输出零字节(<code>ASCII NULL</code>字符)，而不是通常在文件名后的字符。例如<code>grep -lZ</code>在每个文件名之后输出一个零字节，而不是通常的换行符。即使存在包含不寻常字符(例如换行符)的文件名，此选项也可以使输出明确。此选项可与<code>find -print0</code>、<code>perl -0</code>、<code>sort -z</code>和<code>xargs -0</code>等命令一起使用，以处理任意文件名，即使是包含换行符的文件名。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p><code>hello.c</code>文件内容如下:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配带有<code>Hello</code>的行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> Hello hello.c
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配带有<code>Hello</code>行的数量。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-c</span> Hello hello.c
<span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>反转匹配的意义，选择不匹配<code>Hello</code>的行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-v</span> Hello hello.c
<span class="token comment"># #include &lt;stdio.h&gt;</span>
<span class="token comment"># #include &lt;stdlib.h&gt;</span>
<span class="token comment">#</span>
<span class="token comment"># int main() {</span>
<span class="token comment">#    return 0;</span>
<span class="token comment"># }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配带有<code>i</code>的行并忽略大小写。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-i</span> I hello.c
<span class="token comment"># #include &lt;stdio.h&gt;</span>
<span class="token comment"># #include &lt;stdlib.h&gt;</span>
<span class="token comment"># int main() {</span>
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment">#    printf(&quot;Hello World\\n&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仅输出与文件整行匹配的行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-x</span> <span class="token string">&quot;   return 0;&quot;</span> hello.c
<span class="token comment">#    return 0;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配带有<code>Hello</code>的行并输出行号。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-n</span> Hello hello.c
<span class="token comment"># 5:   printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment"># 6:   printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment"># 7:   printf(&quot;Hello World\\n&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归匹配当前目录下所有文件中能够匹配<code>h*</code>的文件，输出行号并忽略大小写，注意实际在终端中匹配成功的位置会使用红色字体标注。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">egrep</span> <span class="token parameter variable">-rni</span> <span class="token string">&quot;h*&quot;</span> ./
<span class="token comment"># ./hello.c:1:#include &lt;stdio.h&gt;</span>
<span class="token comment"># ./hello.c:2:#include &lt;stdlib.h&gt;</span>
<span class="token comment"># ./hello.c:3:</span>
<span class="token comment"># ./hello.c:4:int main() {</span>
<span class="token comment"># ./hello.c:5:   printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment"># ./hello.c:6:   printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment"># ./hello.c:7:   printf(&quot;Hello World\\n&quot;);</span>
<span class="token comment"># ./hello.c:8:   return 0;</span>
<span class="token comment"># ./hello.c:9:}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),d=[a];function l(i,t){return n(),o("div",null,d)}const u=e(s,[["render",l],["__file","egrep命令.html.vue"]]),m=JSON.parse('{"path":"/MacOS/Terminal/egrep%E5%91%BD%E4%BB%A4.html","title":"egrep命令","lang":"zh-CN","frontmatter":{"description":"egrep命令 egrep命令用于模式搜索，属于grep函数族，工作原理和grep -E一样，其将模式视为扩展正则表达式，并打印出与模式匹配的行，如果有多个文件具有匹配的模式，其还能显示每行的文件名。 语法 参数 -A NUM, --after-context=NUM: 在匹配行之后打印尾部上下文的NUM行，在相邻的匹配组之间放置包含--的行。 -a,...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/egrep%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"egrep命令"}],["meta",{"property":"og:description","content":"egrep命令 egrep命令用于模式搜索，属于grep函数族，工作原理和grep -E一样，其将模式视为扩展正则表达式，并打印出与模式匹配的行，如果有多个文件具有匹配的模式，其还能显示每行的文件名。 语法 参数 -A NUM, --after-context=NUM: 在匹配行之后打印尾部上下文的NUM行，在相邻的匹配组之间放置包含--的行。 -a,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"egrep命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":7.31,"words":2193},"filePathRelative":"MacOS/Terminal/egrep命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{u as comp,m as data};
