import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as c,j as o,z as d}from"./app-lp0sOEvl.js";const l={},i=d(`<h1 id="curl命令" tabindex="-1"><a class="header-anchor" href="#curl命令"><span>curl命令</span></a></h1><p><code>curl</code>是一个命令行工具，用于使用任何受支持的协议<code>HTTP</code>、<code>FTP</code>、<code>IMAP</code>、<code>POP3</code>、<code>SCP</code>、<code>SFTP</code>、<code>SMTP</code>、<code>TFTP</code>、<code>TELNET</code>、<code>LDAP</code>或<code>FILE</code>向网络服务器传输数据或从网络服务器传输数据，其被设计成无需用户交互即可工作，因此非常适合在<code>shell</code>脚本中使用，该软件提供代理支持、用户身份验证、<code>FTP</code>上传、<code>HTTP posting</code>、<code>SSL</code>连接、<code>cookie</code>、文件断点传输、<code>metalink</code>等功能。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>URL<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>-#, --progress-bar</code>: 让<code>curl</code>将进度显示为一个简单的进度条，而不是标准的、更具信息性的计量器。</li><li><code>-:, --next</code>: 告诉<code>curl</code>对以下<code>URL</code>和相关选项使用单独的操作，这允许您发送多个<code>URL</code>请求，每个请求都有自己的特定选项，例如不同的用户名或自定义请求，在<code>7.36.0</code>中添加\`。</li><li><code>-0, --http1.0</code>: <code>HTTP</code>，告诉<code>curl</code>使用<code>HTTP 1.0</code>版本，而不是内部首选的<code>HTTP 1.1</code>。</li><li><code>--http1.1</code>: <code>HTTP</code>，告诉<code>curl</code>使用<code>HTTP</code>版本<code>1.1</code>，这是内部默认版本，在<code>7.33.0</code>添加。</li><li><code>--http2</code>: <code>HTTP</code>，告诉<code>curl</code>使用<code>HTTP 2</code>发出请求，这需要构建底层<code>libcurl</code>来支持它，在<code>7.33.0</code>添加。</li><li><code>--no-npn</code>: 禁用<code>NPN TLS</code>扩展，如果<code>libcurl</code>是使用支持<code>NPN</code>的<code>SSL</code>库构建的，则<code>NPN</code>默认启用，支持<code>HTTP 2</code>的<code>libcurl</code>使用<code>NPN</code>在<code>https</code>会话期间与服务器协商对<code>HTTP 2</code>的支持，在<code>7.36.0</code>添加。</li><li><code>--no-alpn</code>: 禁用<code>ALPN TLS</code>扩展，如果<code>libcurl</code>是用一个支持<code>ALPN</code>的<code>SSL</code>库构建的，那么<code>ALPN</code>默认启用，支持<code>HTTP 2</code>的<code>libcurl</code>使用<code>ALPN</code>在<code>https</code>会话期间与服务器协商对<code>HTTP 2</code>的支持，在<code>7.36.0</code>添加。</li><li><code>-1, --tlsv1</code>: <code>SSL</code>，强制<code>curl</code>在与远程<code>TLS</code>服务器协商时使用<code>tls1.x</code>版本，您可以使用选项<code>--tlsv1.0</code>、<code>--tlsv1.1</code>和<code>--tlsv1.2</code>来更精确地控制<code>TLS</code>版本。</li><li><code>-2, --sslv2</code>: <code>SSL</code>，当与远程<code>SSL</code>服务器协商时，强制<code>curl</code>使用<code>SSL version 2</code>。</li><li><code>-3, --sslv3</code>: <code>SSL</code>，当与远程<code>SSL</code>服务器协商时，强制<code>curl</code>使用<code>SSL version 3</code>。</li><li><code>-4, --ipv4</code>: 如果<code>curl</code>能够将一个地址解析为多个<code>IP</code>版本(如果它支持<code>IPv6</code>)，则此选项告诉<code>curl</code>仅将名称解析为<code>IPv4</code>地址。</li><li><code>-6, --ipv6</code>: 如果<code>curl</code>能够将一个地址解析为多个<code>IP</code>版本(如果它支持<code>IPv6</code>)，则此选项告诉<code>curl</code>仅将名称解析为<code>IPv6</code>地址。</li><li><code>-a, --append</code>: <code>FTP/SFTP</code>，当在<code>FTP</code>上传中使用时，这将告诉<code>curl</code>追加到目标文件，而不是覆盖它，如果文件不存在，就创建它，注意，这个选项会被一些<code>SSH</code>服务器忽略，包括<code>OpenSSH</code>。</li><li><code>-A, --user-agent &lt;agent string&gt;</code>: <code>HTTP</code>，指定要发送到<code>HTTP</code>服务器的用户代理字符串，如果这个字段没有设置为<code>Mozilla/4.0</code>，一些做得不好的<code>cgi</code>就会失败，要对字符串中的空格进行编码，请用单引号将字符串括起来，当然，这也可以通过<code>-H，-header</code>选项进行设置，如果多次使用此选项，将使用最后一个选项。</li><li><code>--anyauth</code>: <code>HTTP</code>，告诉<code>curl</code>自己找出身份验证方法，并使用远程站点声称支持的最安全的方法，这是通过首先执行请求并检查响应头来完成的，因此可能会导致额外的网络往返，这是用来代替设置特定的身份验证方法的，您可以使用<code>--basic</code>、<code>--digest</code>、<code>--ntlm</code>和<code>--negotiate</code>来实现，请注意，如果从<code>stdin</code>上传数据，则不建议使用<code>--anyauth</code>，因为它可能需要发送两次数据，然后客户端必须能够倒带，如果从<code>stdin</code>上传时需要，上传操作将失败。</li><li><code>-b, --cookie &lt;name=data&gt;</code>: <code>HTTP</code>，将数据作为<code>cookie</code>传递到<code>HTTP</code>服务器，它应该是以前在<code>Set Cookie:</code>行中从服务器接收到的数据，数据格式应为<code>NAME1=VALUE1; NAME2=VALUE2</code>，如果行中没有使用<code>=</code>符号，则会将其视为用于读取以前存储的<code>cookie</code>行的文件名，如果这些行匹配，则应在此会话中使用，使用这个方法还可以激活<code>cookieparser</code>，它也会让<code>curl</code>记录传入的<code>cookie</code>，如果您将这个方法与<code>-L，-location</code>选项结合使用，这可能会很方便，要从中读取<code>cookie</code>的文件的文件格式应该是纯<code>HTTP</code>头或<code>Netscape/Mozilla cookie</code>文件格式，请注意，用<code>-b, --cookie</code>指定的文件仅用作输入，文件中不会存储<code>Cookie</code>，要存储<code>cookie</code>，请使用<code>-c, --cookiejar</code>选项，或者甚至可以使用<code>-D, --dump-header</code>将<code>HTTP</code>头保存到文件中，如果多次使用此选项，将使用最后一个选项。</li><li><code>-B, --use-ascii</code>: <code>FTP/LDAP</code>，启用<code>ASCII</code>传输，对于<code>FTP</code>，这也可以通过使用以<code>type=A</code>结尾的<code>URL</code>来实现，对于<code>win32</code>系统，此选项使发送到标准输出的数据处于文本模式。</li><li><code>--basic</code>: <code>HTTP</code>，告诉<code>curl</code>使用<code>HTTP</code>基本身份验证，这是默认值，并且此选项通常是无意义的，除非您使用它来重写先前设置的选项，该选项设置了不同的身份验证方法，例如<code>--ntlm</code>、<code>--digest</code>或<code>--negotiate</code>。</li><li><code>-c, --cookie-jar &lt;file name&gt;</code>: <code>HTTP</code>，指定在完成操作后要将所有<code>cookie</code>写入哪个文件，<code>curl</code>写入以前从指定文件读取的所有<code>cookie</code>以及从远程服务器接收的所有<code>cookie</code>，如果没有已知的<code>cookies</code>，则不会写入任何文件，文件将使用<code>Netscape cookie</code>文件格式写入，如果将文件名设置为单破折号<code>-</code>，则<code>cookie</code>将写入标准输出，此命令行选项将激活生成<code>curl</code>记录并使用<code>cookie</code>的<code>cookie</code>引擎，另一种激活它的方法是使用<code>-b, --cookie</code>选项，如果不能创建或写入<code>cookiejar</code>，整个<code>curl</code>操作不会失败，甚至不会清楚地报告错误，使用<code>-v</code>会显示一个警告，但这是关于这种可能致命的情况的唯一可见反馈，如果多次使用此选项，将使用最后指定的文件名。</li><li><code>-C, --continue-at &lt;offset&gt;</code>: 以给定的偏移量继续<code>/</code>恢复以前的文件传输，给定的偏移量是将被跳过的确切字节数，从源文件的开头开始计算，然后再将其传输到目标，如果与上载一起使用，<code>curl</code>将不使用<code>FTP</code>服务器命令大小，使用<code>-C -</code>告诉<code>curl</code>自动找出在哪里<code>/</code>如何继续传输，然后它使用给定的输出<code>/</code>输入文件来解决这个问题，如果多次使用此选项，将使用最后一个选项。</li><li><code>--ciphers &lt;list of ciphers&gt;</code>: <code>SSL</code>，指定要在连接中使用的密码，密码列表必须指定有效的密码，此为的<code>SSL</code>密码列表详细信息<code>http://www.openssl.org/docs/apps/ciphers.html</code>，<code>NSS</code>密码的实现方式与<code>OpenSSL</code>和<code>GnuTLS</code>不同，<code>NSS</code>密码的完整列表位于以下<code>URL</code>的<code>NSSCipherSuite</code>条目中<code>http://git.fedorahosted.org/cgit/mod_nss.git/plain/docs/mod_nss.html#Directives</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--compressed</code>: <code>HTTP</code>，使用<code>curl</code>支持的算法之一请求压缩响应，并保存未压缩的文档，如果使用此选项并且服务器发送不受支持的编码，<code>curl</code>将报告错误。</li><li><code>--connect-timeout &lt;seconds&gt;</code>: 允许连接到服务器的最长时间(秒)，这只会限制连接阶段，一旦<code>curl</code>连接了，这个选项就不再有用了，自<code>7.32.0</code>以来，此选项接受十进制值，但实际超时的精度将随着指定超时的十进制精度增加而降低，另请参见<code>-m, -max time</code>选项，如果多次使用此选项，将使用最后一个选项。</li><li><code>--create-dirs</code>: 当与<code>-o</code>选项结合使用时，<code>curl</code>将根据需要创建必要的本地目录层次结构，此选项创建与<code>-o</code>选项一起提到的<code>dir</code>，而不是其他选项，如果<code>-o</code>文件名不使用<code>dir</code>，或者它提到的<code>dir</code>已经存在，则不会创建<code>dir</code>，要在使用<code>FTP</code>或<code>SFTP</code>时创建远程目录，请尝试<code>--FTP create dirs</code>。</li><li><code>--crlf</code>: <code>FTP</code>，上传时将<code>LF</code>转换为<code>CRLF</code>，适用于<code>MVS (OS/390)</code>。</li><li><code>--crlfile &lt;file&gt;</code>: <code>HTTPS/FTPS</code>，提供一个使用<code>PEM</code>格式的文件，其中包含一个证书吊销列表，该列表可以指定要被视为吊销的对等证书，如果多次使用此选项，将使用最后一个选项，在<code>7.19.7</code>增加。</li><li><code>-d, --data &lt;data&gt;</code>: <code>HTTP</code>，将<code>POST</code>请求中指定的数据发送到<code>HTTP</code>服务器，就像用户填写<code>HTML</code>表单并按下<code>submit</code>按钮时浏览器所做的那样，这将导致<code>curl</code>使用内容类型<code>application/x-www-form-urlencoded</code>将数据传递给服务器，与<code>-F, --form</code>比较，<code>-d, --data</code>与<code>--data ascii</code>相同，要发布纯二进制的数据，应该改用<code>--data binary</code>选项，要对表单字段的值进行<code>URL</code>编码，可以使用<code>--data urlencode</code>，如果这些选项中的任何一个在同一命令行上被多次使用，则指定的数据段将与分隔的<code>&amp;</code>符号合并在一起，因此，使用<code>-d name=daniel -d skill=lousy</code>将生成一个类似<code>name=daniel&amp;skill=lousy</code>的<code>post</code>块，如果数据以<code>@</code>开头，其余的应该是从中读取数据的文件名，如果要从<code>stdin</code>读取数据，也可以指定多个文件，例如，从名为<code>foobar</code>的文件发布数据将使用<code>--data@foobar</code>完成，当<code>--data</code>被告知从这样的文件中读取时，回车符和换行符将被去除。</li><li><code>-D, --dump-header &lt;file&gt;</code>: 将协议头写入指定的文件，当您想存储<code>HTTP</code>站点发送给您的头文件时，使用此选项非常方便,通过使用<code>-b, -cookie</code>选项，可以在第二次<code>curl</code>调用中读取来自头的<code>cookie</code>，但是，<code>-c，-cookie jar</code>选项是存储<code>cookie</code>的更好方法，在<code>FTP</code>中使用时，<code>FTP</code>服务器响应行被认为是<code>headers</code>，因此保存在那里，如果多次使用此选项，将使用最后一个选项。</li><li><code>--data-ascii &lt;data&gt;</code>: 请参见<code>-d, --data</code>。</li><li><code>--data-binary &lt;data&gt;</code>: <code>HTTP</code>，这将完全按照指定的方式发布数据，无需任何额外处理，如果数据以<code>@</code>开头，其余的应该是文件名，数据的发布方式与<code>--dataascii</code>类似，只是保留了换行符和回车符，并且从不进行转换，如果多次使用此选项，则第一个选项后面的选项将附加<code>-d, -data</code>中所述的数据。</li><li><code>--data-urlencode &lt;data&gt;</code>: <code>HTTP</code>，这会发布数据，与其他<code>--data</code>选项类似，但会执行<code>URL</code>编码，在<code>7.18.0</code>中添加，为了符合<code>CGI</code>，<code>&lt;data&gt;</code>部分应以名称开头，后跟分隔符和内容规范，可以使用以下语法之一将<code>&lt;data&gt;</code>部分传递给<code>curl</code>: <ul><li><code>content</code>: 这将使<code>curl URL</code>编码内容并将其传递，请小心，使内容不包含任何<code>=</code>或<code>@</code>符号，因为这将使语法与以下其他情况之一匹配。</li><li><code>=content</code>: 这将使<code>curl URL-encode</code>编码内容并将其传递，前面的<code>=</code>符号不包括在数据中。</li><li><code>name=content</code>: 这将使<code>curl URL</code>编码内容部分并将其继续传递，请注意，名称部分应该已经过<code>URL</code>编码。</li><li><code>@filename</code>: 这将使卷曲加载来自给定文件(包括任何换行符)的数据，对该数据进行<code>URL</code>编码并在<code>POST</code>中传递。</li><li><code>name@filename</code>: 这将使<code>curl</code>从给定的文件(包括任何换行符)加载数据，<code>URL</code>对该数据进行编码并在<code>POST</code>中传递，名称部分附加了一个等号，结果是<code>name=urlencoded</code>文件内容，注意，名称应该已经是<code>URL</code>编码的。</li></ul></li><li><code>--delegation LEVEL</code>: 设置<code>LEVEL</code>，告诉服务器在处理用户凭据时允许委托什么，通常与<code>GSS/kerberos</code>一起使用。 <ul><li><code>none</code>: 不允许任何授权。</li><li><code>policy</code>: 委托当且仅当<code>Kerberos</code>服务票证中设置了<code>OK-AS-DELEGATE</code>标志时，这是领域策略的问题。</li><li><code>always</code>: 无条件地允许服务器进行委托。</li></ul></li><li><code>--digest</code>: <code>HTTP</code>，启用<code>HTTP</code>摘要身份验证，这是一种身份验证方案，可防止密码以明文形式通过有线发送，将此选项与正常的<code>-u, -user</code>选项结合使用，以设置用户名和密码，如果多次使用此选项，则只使用第一个选项。</li><li><code>--disable-eprt</code>: <code>FTP</code>，告诉<code>curl</code>在执行活动<code>FTP</code>传输时禁用<code>EPRT</code>和<code>LPRT</code>命令，<code>curl</code>通常会首先尝试使用<code>EPRT</code>，然后在使用<code>PORT</code>之前使用<code>LPRT</code>，但是有了这个选项，它会立即使用<code>PORT</code>，<code>EPRT</code>和<code>LPRT</code>是原始<code>FTP</code>协议的扩展，可能无法在所有服务器上工作，但它们以比传统的<code>PORT</code>命令更好的方式实现了更多功能，<code>--eprt</code>可以用来再次显式地启用<code>eprt</code>，并且<code>--no eprt</code>是<code>--disable eprt</code>的别名，禁用<code>EPRT</code>只会更改活动行为，如果要切换到被动模式，则不需要使用<code>-P, -ftp</code>端口或强制使用<code>-ftp pasv</code>。</li><li><code>--dns-interface &lt;interface&gt;</code>: 告诉<code>curl</code>通过<code>&lt;interface&gt;</code>发送传出的<code>DNS</code>请求，此选项对应于<code>--interface</code>(不影响<code>DNS</code>)，提供的字符串必须是接口名称(不是地址)，此选项要求<code>libcurl</code>是使用支持此操作的解析器后端构建的，<code>c-ares</code>后端是唯一这样的，在<code>7.33.0</code>中添加。</li><li><code>--dns-ipv4-addr &lt;ip-address&gt;</code>: 告诉<code>curl</code>在发出<code>ipv4dns</code>请求时绑定到<code>&lt;ip address&gt;</code>，以便<code>DNS</code>请求源自此地址，参数应为单个<code>IPv4</code>地址，此选项要求<code>libcurl</code>是使用支持此操作的解析器后端构建的，<code>c-ares</code>后端是唯一这样的，在<code>7.33.0</code>中添加。</li><li><code>--dns-ipv6-addr &lt;ip-address&gt;</code>: 在发出<code>ipv6dns</code>请求时，告诉<code>curl</code>绑定到<code>&lt;ip address&gt;</code>，以便<code>DNS</code>请求源自此地址，参数应为单个<code>IPv6</code>地址，此选项要求<code>libcurl</code>是使用支持此操作的解析器后端构建的，<code>c-ares</code>后端是唯一这样的，在<code>7.33.0</code>中添加。</li><li><code>--dns-servers &lt;ip-address,ip-address&gt;</code>: 设置要使用的<code>DNS</code>服务器列表，而不是系统默认值，<code>IP</code>地址列表应以逗号分隔，端口号也可以选择在每个<code>IP</code>地址后给出<code>&lt;Port number&gt;</code>，此选项要求<code>libcurl</code>是使用支持此操作的解析器后端构建的，<code>c-ares</code>后端是唯一这样的，在<code>7.33.0</code>中添加。</li><li><code>-e, --referer &lt;URL&gt;</code>: <code>HTTP</code>，将<code>referer Page</code>信息发送到<code>HTTP</code>服务器，当然，这也可以用<code>-H, -header</code>标志来设置，当与<code>-L, -location</code>一起使用时，您可以在<code>--referer URL</code>后面附加<code>; auto</code>，使<code>curl</code>在<code>location:header</code>后面自动设置上一个<code>URL</code>，<code>auto</code>字符串可以单独使用，即使您没有设置初始<code>--referer</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>-E, --cert &lt;certificate[:password]&gt;</code>: <code>SSL</code>，告诉<code>curl</code>在使用<code>HTTPS</code>、<code>FTPS</code>或其他基于<code>SSL</code>的协议获取文件时使用指定的客户端证书文件，如果使用安全传输，证书必须为<code>PKCS#12</code>格式，如果使用任何其他引擎，证书必须为<code>PEM</code>格式，如果未指定可选密码，将在终端上查询该密码，注意，这个选项假设一个<code>certificate</code>是私钥和私钥连接在一起的，请参见<code>--cert</code>和<code>--key</code>以独立地指定它们。</li><li><code>--engine &lt;name&gt;</code>: 选择用于密码操作的<code>OpenSSL</code>加密引擎，使用<code>--engine list</code>打印构建时支持的引擎的列表，请注意，并非所有<code>engine</code>在运行时都可用。</li><li><code>--environment</code>: <code>RISC OS ONLY</code>，使用<code>-w</code>选项支持的名称设置一系列环境变量，以便在运行<code>curl</code>之后更容易地提取有用的信息。</li><li><code>--egd-file &lt;file&gt;</code>: <code>SSL</code>，指定守护进程套接字的路径名，套接字用于为<code>SSL</code>连接的随机引擎播种，另请参见<code>--random file</code>选项。</li><li><code>--cert-type &lt;type&gt;</code>: <code>SSL</code>，告诉<code>curl</code>提供的证书是什么类型的证书，<code>PEM</code>、<code>DER</code>和<code>ENG</code>是公认的类型，如果未指定，则假定为<code>PEM</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--cacert &lt;CA certificate&gt;</code>: <code>SSL</code>，告诉<code>curl</code>使用指定的证书文件来验证对等方，文件可能包含多个<code>CA</code>证书，证书必须采用<code>PEM</code>格式，通常情况下，<code>curl</code>是使用默认文件构建的，因此此选项通常用于更改默认文件。</li><li><code>--capath &lt;CA certificate directory&gt;</code>: <code>SSL</code>，告诉<code>curl</code>使用指定的证书目录来验证对等方，可以通过使用<code>:</code>分隔多条路径，例如<code>path1:path2:path3</code>，证书必须是<code>PEM</code>格式的，如果<code>curl</code>是基于<code>OpenSSL</code>构建的，那么目录必须使用<code>OpenSSL</code>提供的<code>c_rehash</code>程序进行处理，如果<code>--cacert</code>文件包含许多<code>CA</code>证书，那么使用<code>--capath</code>可以使<code>OpenSSL</code>支持的<code>curl</code>比使用<code>--cacert</code>更有效地建立<code>SSL</code>连接。如果设置了此选项，将忽略默认的<code>capath</code>值，如果多次使用，将使用最后一个值。</li><li><code>-f, --fail</code>: <code>HTTP</code>，服务器错误时无提示失败，即完全没有输出，这样做主要是为了更好地使脚本等更好地处理失败的尝试，在正常情况下，当<code>HTTP</code>服务器无法传递文档时，它会返回一个<code>HTML</code>文档，通常会描述原因，此标志将阻止<code>curl</code>输出该值并返回错误<code>22</code>，这种方法不是故障安全的，有时会出现不成功的响应代码，特别是在涉及身份验证时，例如响应代码<code>401</code>和<code>407</code>。</li><li><code>-F, --form &lt;name=content&gt;</code>: <code>HTTP</code>，这使得<code>curl</code>可以模拟用户按下<code>submit</code>按钮的填充表单，<code>curl</code>根据<code>rfc2388</code>使用内容类型<code>multipart/form</code>数据发布数据，这样就可以上传二进制文件等，若强制内容部分成为文件，在文件名前面加上<code>@</code>符号，若要仅从文件中获取内容部分，请在文件名前面加上<code>&lt;</code>符号，<code>@</code>和<code>&lt;</code>之间的区别是<code>@</code>使一个文件作为文件上传附加到<code>post</code>中，而<code>&lt;</code>使一个文本字段从一个文件中获取该文本字段的内容。</li><li><code>--ftp-account [data]</code>: <code>FTP</code>，当<code>FTP</code>服务器在提供用户名和密码后请求<code>account data</code>时，使用<code>ACCT</code>命令发送该数据，在<code>7.13.0</code>中添加，如果多次使用此选项，将使用最后一个选项。</li><li><code>--ftp-alternative-to-user &lt;command&gt;</code>: <code>FTP</code>，如果与用户的身份验证和<code>PASS</code>命令失败，则发送此命令，当使用客户端证书通过<code>FTPS</code>连接到<code>Tumbleweed</code>的安全传输服务器时，使用<code>SITE AUTH</code>将告诉服务器从证书中检索用户名，在<code>7.15.5</code>增加。</li><li><code>--ftp-create-dirs</code>: <code>FTP/SFTP</code>，当<code>FTP</code>或<code>sftp url/</code>操作使用服务器上当前不存在的路径时，<code>curl</code>的标准行为是失败，使用此选项，<code>curl</code>将尝试创建丢失的目录。</li><li><code>--ftp-method [method]</code>: <code>FTP</code>，控制<code>curl</code>应该使用什么方法访问<code>FTP(S)</code>服务器上的文件，在<code>7.15.1</code>添加，方法参数应该是以下选项之一： <ul><li><code>multicwd</code>: <code>curl</code>对给定<code>URL</code>中的每个路径部分执行一个<code>CWD</code>操作，对于深层层次结构，这意味着有很多命令，<code>RFC1738</code>就是这么说明的，这是默认但最慢的行为。</li><li><code>nocwd</code>: <code>curl</code>根本不做<code>CWD</code>，<code>curl</code>将执行<code>SIZE</code>、<code>RETR</code>、<code>STOR</code>等操作，并为所有这些命令提供到服务器的完整路径，这是最快的行为。</li><li><code>singlecwd</code>: <code>curl</code>对完整的目标目录执行一个<code>CWD</code>，然后正常地对文件进行操作，就像<code>multicwd</code>一样，这比<code>nocwd</code>更符合标准，但没有<code>multicwd</code>的全部处理。</li></ul></li><li><code>--ftp-pasv</code>: <code>FTP</code>，数据连接使用被动模式，被动是内部默认行为，但使用此选项可用于覆盖以前的<code>-P/-ftp</code>端口选项，在<code>7.11.0</code>中添加，如果多次使用此选项，则只使用第一个选项，撤消强制的被动端口确实是不可行的，但是您必须再次强制执行正确的<code>-P, --ftp</code>端口，被动模式意味着<code>curl</code>将首先尝试<code>EPSV</code>命令，然后再尝试<code>PASV</code>，除非使用<code>--disable EPSV</code>。</li><li><code>--ftp-skip-pasv-ip</code>: <code>FTP</code>，当<code>curl</code>连接数据连接时，告诉<code>curl</code>不要使用服务器在响应<code>curl</code>的<code>PASV</code>命令时建议的<code>IP</code>地址，相反，<code>curl</code>将重用它已经用于控制连接的相同<code>IP</code>地址，在<code>7.14.2</code>增加，如果使用<code>PORT</code>、<code>EPRT</code>或<code>EPSV</code>代替<code>PASV</code>，则此选项无效。</li><li><code>--ftp-pret</code>: <code>FTP</code>，告诉<code>curl</code>在<code>PASV</code>和<code>EPSV</code>之前发送<code>PRET</code>命令，某些<code>FTP</code>服务器(主要是<code>drftpd</code>)需要这个非标准的命令来显示目录列表，以及在<code>PASV</code>模式下进行更新和下载，在<code>7.20.x</code>中添加。</li><li><code>--ftp-ssl-ccc</code>: <code>FTP</code>，使用<code>CCC</code>(清除命令通道)在验证后关闭<code>SSL/TLS</code>层，控制信道通信的其余部分将是未加密的，这允许<code>NAT</code>路由器跟踪<code>FTP</code>事务，默认模式为被动模式，其他模式请参见<code>--ftp ssl ccc mode</code>，在<code>7.16.1</code>增加。</li><li><code>--ftp-ssl-ccc-mode [active/passive]</code>: <code>FTP</code>，使用<code>CCC</code>(清除命令通道)设置<code>CCC</code>模式，被动模式不会启动关闭，而是等待服务器执行，并且不会从服务器回复关闭，活动模式启动关机并等待服务器的回复，<code>7.16.2</code>增加。</li><li><code>--ftp-ssl-control</code>: <code>FTP</code>，<code>FTP</code>登录需要<code>SSL/TLS</code>，清除以进行传输，允许安全的身份验证，但非加密的数据传输效率，如果服务器不支持<code>SSL/TLS</code>，则传输失败，在<code>7.16.0</code>中添加，目前仍然可以使用，但将在将来的版本中删除。</li><li><code>--form-string &lt;name=string&gt;</code>: <code>HTTP</code>，类似于<code>--form</code>，只是命名参数的值字符串是按字面意思使用的，值中的前导<code>@</code>和<code>&lt;</code>字符以及<code>; type=</code>字符串没有特殊含义，如果字符串值可能意外触发<code>--form</code>的&#39;<code>@</code>&#39;或&#39;<code>&lt;</code>&#39;特性，请优先使用<code>--form</code>。</li><li><code>-g, --globoff</code>: 此选项关闭<code>URL globbing</code>解析器，设置此选项时，可以指定包含字母<code>{}[]</code>的<code>URL</code>，而无需<code>curl</code>本身对其进行解释，请注意，这些字母不是正常的合法<code>URL</code>内容，但它们应该根据<code>URI</code>标准进行编码。</li><li><code>-G, --get</code>: 使用此选项时，将使用<code>-d</code>、<code>-data</code>、<code>-data binary</code>或<code>-data urlencode</code>指定的所有数据在<code>HTTP GET</code>请求中使用，而不是在其他情况下使用的<code>POST</code>请求，数据将附加到带有<code>?</code>的<code>URL</code>中分离器，如果与<code>-I</code>结合使用，<code>POST</code>数据将被附加到带有<code>HEAD</code>请求的<code>URL</code>中，如果多次使用此选项，则只使用第一个选项，这是因为撤消<code>GET</code>没有意义，但是您应该执行您喜欢的替代方法。</li><li><code>-H, --header &lt;header&gt;</code>: <code>HTTP</code>，向服务器发送<code>HTTP</code>时请求中包含的额外头，您可以指定任意数量的额外标头，请注意，如果您应该添加一个与<code>curl</code>将使用的内部头具有相同名称的自定义头，那么将使用外部设置的头而不是内部头，这使得你可以做比<code>curl</code>更复杂的东西，您不应该在不完全清楚自己在做什么的情况下替换内部设置的头文件，通过在冒号的右侧提供一个没有内容的替换来删除内部标题，如<code>: -H Host:</code>，如果发送没有值的自定义标头，则其标头必须以分号结尾，例如<code>-H X-custom-header;</code>以发送<code>X-custom-header:</code>，<code>curl</code>将确保您添加<code>/</code>替换的每个标题都使用正确的行尾标记发送，因此您不应将其添加为标题内容的一部分<code>: </code>不要添加换行符或回车符，它们只会为您带来麻烦，另请参见<code>-A, --user-agent</code>和<code>-e, --referer</code>选项。</li><li><code>--hostpubmd5 &lt;md5&gt;</code>: <code>SCP/SFTP</code>，传递包含<code>32</code>个十六进制数字的字符串，字符串应该是远程主机公钥的<code>128</code>位<code>MD5</code>校验和，除非<code>md5 sums</code>匹配，否则<code>curl</code>将拒绝与主机的连接，在<code>7.17.1</code>增加。</li><li><code>--ignore-content-length</code>: <code>HTTP</code>，忽略内容长度标题，这对于运行<code>Apache1.x</code>的服务器尤其有用，后者将报告大于<code>2G</code>的文件的不正确内容长度。</li><li><code>-i, --include</code>: <code>HTTP</code>，在输出中包括<code>HTTP</code>头，<code>HTTP</code>头包括服务器名称、文档日期、<code>HTTP</code>版本等内容。</li><li><code>-I, --head</code>: <code>HTTP/FTP/FILE</code>，仅获取<code>HTTP</code>头<code>HTTP</code>服务器的特点是响应头，它只用来获取文档的头，当用于<code>FTP</code>或文件时，<code>curl</code>仅显示文件大小和上次修改时间。</li><li><code>--interface &lt;name&gt;</code>: 使用指定的接口执行操作，您可以输入接口名、<code>IP</code>地址或主机名，例如<code>: curl</code>—接口<code>eth0:1 http://www.netscape.com/</code>如果多次使用此选项，将使用最后一个选项。</li><li><code>-j, --junk-session-cookies</code>: <code>HTTP</code>，当<code>curl</code>被告知从给定文件读取<code>cookies</code>时，此选项将使其放弃所有会话<code>cookies, </code>这将基本上具有与启动新会话相同的效果，典型的浏览器总是在关闭会话<code>cookie</code>时丢弃它们。</li><li><code>-J, --remote-header-name</code>: <code>HTTP</code>，此选项告诉<code>-O, -remote name</code>选项使用服务器指定的内容配置文件名，而不是从<code>URL</code>提取文件名，在提供的文件名中还没有尝试解码%<code>-</code>序列，因此此选项可能会为您提供意外的文件名。</li><li><code>-k, --insecure</code>: <code>SSL</code>，这个选项显式地允许<code>curl</code>执行不安全的<code>SSL</code>连接和传输，所有<code>SSL</code>连接都试图通过使用默认安装的<code>CA</code>证书捆绑包来确保安全，这使得所有被认为是不安全的连接失败，除非使用<code>-k, -unsecure</code>。</li><li><code>-K, --config &lt;config file&gt;</code>: 指定从哪个配置文件读取<code>curl</code>参数，配置文件是一个文本文件，可以在其中写入命令行参数，然后使用这些参数，就像它们被写入实际的命令行一样，选项及其参数必须在同一配置文件行中指定，并用空格、冒号或等号分隔，可以选择在配置文件中给出长选项名，而不使用初始双破折号，如果是这样，冒号或等号字符可以用作分隔符，如果使用一个或两个破折号指定选项，则选项与其参数之间不能有冒号或等号字符，如果参数要包含空格，则参数必须用引号括起来，在双引号中，下列转义序列可用: <code>\\\\</code>、<code>\\&quot;</code>、<code>\\t</code>、<code>\\n</code>、<code>\\r</code>、<code>\\v</code>，任何其他字母前面的反斜杠将被忽略，如果配置行的第一列是<code>#</code>字符，则该行的其余部分将被视为注释，在配置文件中，每个物理行只写一个选项，将文件名指定为<code>-K, --config</code>为<code>-,</code>使<code>curl</code>从<code>stdin</code>读取文件。</li><li><code>--keepalive-time &lt;seconds&gt;</code>: 此选项设置在发送<code>keepalive</code>探测之前连接需要保持空闲的时间以及各个<code>keepalive</code>探测之间的时间，它目前在提供<code>TCP_KEEPIDLE</code>和<code>TCP_KEEPINTVL</code>套接字选项的操作系统上非常有效(指<code>Linux</code>、最近的<code>AIX</code>、<code>HP-UX</code>等)，如果使用<code>--no keepalive, </code>则此选项无效，(在<code>7.18.0</code>中添加)如果多次使用此选项，将使用最后一个选项，如果未指定，则该选项默认为<code>60</code>秒。</li><li><code>--key &lt;key&gt;</code>: <code>SSL/SSH</code>，私钥文件名，允许您在此单独的文件中提供私钥，如果多次使用此选项，将使用最后一个选项。</li><li><code>--key-type &lt;type&gt;</code>: <code>SSL</code>，私钥文件类型，指定<code>--key</code>提供的私钥是哪种类型，支持<code>DER</code>、<code>PEM</code>和<code>ENG, </code>如果未指定，则假定为<code>PEM</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--krb &lt;level&gt;</code>: <code>FTP</code>，启用<code>Kerberos</code>身份验证和使用，必须输入级别，并且级别应为<code>clear</code>、<code>safe</code>、<code>secretary</code>或<code>private</code>之一，如果您使用的级别不是这些级别之一，则将改用<code>private</code>，此选项需要使用<code>kerberos4</code>支持构建的库，这并不常见，使用<code>-V, -version</code>查看卷曲是否支持它，如果多次使用此选项，将使用最后一个选项。</li><li><code>-l, --list-only</code>: <code>FTP</code>，列出<code>FTP</code>目录时，此开关强制使用仅名称视图，如果用户希望机器解析<code>FTP</code>目录的内容，这尤其有用，因为普通目录视图不使用标准的外观或格式，这样使用时，该选项将导致向服务器发送<code>NLST</code>命令，而不是<code>LIST</code>，注意: 一些<code>FTP</code>服务器在响应<code>NLST</code>时只列出文件，它们不包括子目录和符号链接，<code>POP3</code>从<code>POP3</code>检索特定电子邮件时，此开关强制执行<code>LIST</code>命令而不是<code>RETR</code>，如果用户希望查看服务器上是否存在特定的消息<code>id</code>以及它的大小，那么这一点特别有用，注意: 当与<code>-X, -request&lt;command&gt;</code>组合使用时，此选项可用于发送<code>UIDL</code>命令，因此用户可以使用电子邮件的唯一标识符而不是其消息<code>id</code>来发出请求，在<code>7.21.5</code>增加。</li><li><code>-L, --location</code>: <code>HTTP/HTTPS</code>，如果服务器报告请求的页面已移动到其他位置(用<code>location:header</code>和<code>3XX</code>响应代码表示)，此选项将使<code>curl</code>在新位置上重做请求，如果与<code>-i, --include</code>或<code>-i, --head</code>一起使用，将显示所有请求页面的标题，使用身份验证时，<code>curl</code>只将其凭据发送到初始主机，如果重定向将<code>curl</code>带到另一个主机，它将无法截获用户<code>+</code>密码，另请参见<code>--location trusted</code>，了解如何更改此设置，您可以使用<code>--max redirs</code>选项来限制要遵循的重定向数量，当<code>curl</code>遵循重定向并且请求不是纯<code>GET</code>(例如<code>POST</code>或<code>PUT</code>)时，如果<code>HTTP</code>响应是<code>301</code>、<code>302</code>或<code>303</code>，它将使用<code>GET</code>执行以下请求，如果响应代码是任何其他<code>3xx</code>代码，<code>curl</code>将使用相同的未修改方法重新发送以下请求，您可以告诉<code>curl</code>不要更改<code>non-GET</code>请求方法，以便在<code>30x</code>响应之后使用专用选项<code>--post301</code>、<code>-post302</code>和<code>-post303</code>获取。</li><li><code>--libcurl &lt;file&gt;</code>: 将此选项附加到任何普通的<code>curl</code>命令行，您将获得一个<code>libcurl</code>，它使用<code>C</code>源代码编写到文件中，执行与命令行操作相同的操作！如果多次使用此选项，将使用最后给定的文件名，<code>7.16.1</code>增加。</li><li><code>--limit-rate &lt;speed&gt;</code>: 指定您希望<code>curl</code>使用的最大传输速率<code>-</code>用于下载和上载，如果您有一个有限的管道，并且希望您的传输不使用整个带宽，则此功能非常有用，使它比其他情况下慢，给定的速度以字节<code>/</code>秒为单位，除非附加后缀，加上<code>k</code>或<code>k</code>将把数字计为千字节，<code>m</code>或<code>m</code>表示兆字节，而<code>g</code>或<code>g</code>表示千兆字节，例如<code>: 200K</code>、<code>3m</code>和<code>1G</code>，给定的速率是整个传输过程中计算的平均速度，这意味着<code>curl</code>可能在短脉冲中使用更高的传输速度，但随着时间的推移，它使用的传输速度不会超过给定的速率，如果您还使用<code>-Y, -speed limit</code>选项，则该选项将优先，并可能略微削弱速率限制，以帮助保持速度限制逻辑正常工作，如果多次使用此选项，将使用最后一个选项。</li><li><code>--local-port &lt;num&gt;[-num]</code>: 设置用于连接的本地端口号的首选数目或范围，请注意，端口号本质上是一种稀缺资源，有时会很忙，因此将此范围设置为太窄可能会导致不必要的连接设置失败，在<code>7.15.2</code>增加。</li><li><code>--location-trusted</code>: <code>HTTP/HTTPS</code>，与<code>-L, --location</code>类似，但允许向站点可能重定向到的所有主机发送名称<code>+</code>密码，如果站点将您重定向到要向其发送身份验证信息的站点(在<code>HTTP</code>基本身份验证的情况下是明文)，则这可能会或可能不会导致安全漏洞。</li><li><code>-m, --max-time &lt;seconds&gt;</code>: 允许整个操作所用的最长时间(秒)，这有助于防止批处理作业因网络或链接运行缓慢而挂起数小时，自<code>7.32.0</code>以来，此选项接受十进制值，但实际超时的精度将随着指定超时的十进制精度增加而降低，另请参见<code>--connect timeout</code>选项，如果多次使用此选项，将使用最后一个选项。</li><li><code>--login-options &lt;options&gt;</code>: 指定服务器身份验证期间要使用的登录选项，您可以使用登录选项指定身份验证期间可能使用的特定于协议的选项，目前只有<code>IMAP</code>、<code>POP3</code>和<code>SMTP</code>支持登录选项，有关登录选项的更多信息，请参阅<code>RFC 2384</code>、<code>RFC 5092</code>和<code>IETF</code>草稿<code>draft-earhart-url-smtp-00.txt</code>(在<code>7.34.0</code>中添加)，如果多次使用此选项，将使用最后一个选项。</li><li><code>--mail-auth &lt;address&gt;</code>: <code>SMTP</code>，指定单个地址，这将用于指定正在中继到另一个服务器的已提交邮件的身份验证地址(标识)，在<code>7.25.0</code>中添加。</li><li><code>--mail-from &lt;address&gt;</code>: <code>SMTP</code>，指定发送给定邮件的单一地址，在<code>7.20.0</code>中添加。</li><li><code>--max-filesize &lt;bytes&gt;</code>: 指定要下载的文件的最大大小(以字节为单位)，如果请求的文件大于这个值，传输将不会开始，<code>curl</code>将返回退出代码<code>63</code>，注意<code>: </code>文件大小在下载之前并不总是已知的，对于这样的文件，即使文件传输最终超过这个给定的限制，这个选项也不起作用，这涉及到<code>FTP</code>和<code>HTTP</code>传输。</li><li><code>--mail-rcpt &lt;address&gt;</code>: (<code>SMTP</code>)指定单个地址、用户名或邮件列表名称，在执行邮件传输时，收件人应指定要将邮件发送到的有效电子邮件地址，(在<code>7.20.0</code>中添加)执行地址验证(<code>VRFY</code>命令)时，应将收件人指定为用户名或用户名和域(根据<code>RFC5321</code>第<code>3.5</code>节)，(在<code>7.34.0</code>中添加)在执行邮件列表扩展(<code>EXPN</code>命令)时，应该使用邮件列表名称指定收件人，例如<code>Friends</code>或<code>London Office</code>，在<code>7.34.0</code>中添加。</li><li><code>--max-redirs &lt;num&gt;</code>: 设置允许的最大重定向次数，如果使用<code>-L, --location</code>，这个选项可以用来防止<code>curl</code>不断地遵循重定向，默认情况下，限制设置为<code>50</code>个重定向，将此选项设置为<code>-1</code>以使其无限，如果多次使用此选项，将使用最后一个选项。</li><li><code>--metalink</code>: 此选项可以告诉<code>curl</code>将给定的<code>URI</code>作为<code>Metalink</code>文件进行解析和处理(支持版本<code>3</code>和版本<code>4</code>(<code>RFC 5854</code>))，并在出现错误(例如文件或服务器不可用)时使用中列出的镜像进行故障转移，它还将在下载完成后验证文件的哈希值，<code>Metalink</code>文件本身在内存中下载和处理，而不是存储在本地文件系统中。</li><li><code>-n, --netrc</code>: 使<code>curl</code>扫描用户主目录中的<code>.netrc</code>(<code>netrc on Windows</code>)文件以获取登录名和密码，这通常用于<code>UNIX</code>上的<code>FTP</code>，如果与<code>HTTP</code>一起使用，<code>curl</code>将启用用户身份验证，有关文件格式的详细信息，请参阅<code>netrc(4)</code>或<code>ftp(1)</code>，如果文件没有正确的权限，<code>curl</code>不会报错，环境变量<code>HOME</code>用于查找主目录，一个快速且非常简单的示例，说明如何设置<code>.netrc</code>以允许<code>curl</code>通过<code>FTP</code>传输到机器<code>host.domain.com</code>网站用户名为<code>myself</code>和密码为<code>secret</code>的应类似于<code>: </code>机器<code>host.domain.com</code>网站登录密码密码。</li><li><code>-N, --no-buffer</code>: 禁用输出流的缓冲，在正常的工作环境中，<code>curl</code>将使用一个标准的缓冲输出流，它将以块的形式输出数据，而不一定是在数据到达时，使用此选项将禁用该缓冲，请注意，这是已记录的否定选项名称，因此，可以使用<code>--buffer</code>来强制执行缓冲。</li><li><code>--netrc-file</code>: 此选项类似于<code>--netrc</code>，只是您提供了<code>curl</code>应该使用的<code>netrc</code>文件的路径(绝对或相对)，每次调用只能指定一个<code>netrc</code>文件，如果提供了多个<code>--netrc</code>文件选项，则只使用最后一个选项，(<code>7.21.5</code>增加)此选项会覆盖<code>--netrc</code>的任何用法，因为它们是互斥的，如果指定，它还将遵循<code>--netrc optional</code>。</li><li><code>--netrc-optional</code>: 与<code>--netrc</code>非常相似，但此选项使<code>.netrc</code>的用法成为可选的，而不是像<code>--netrc</code>选项那样是强制性的。</li><li><code>--negotiate</code>: <code>HTTP</code>，启用协商(<code>SPNEGO</code>)身份验证，如果要为代理身份验证启用协商(<code>SPNEGO</code>)，请使用<code>--proxy Negotiate</code>，此选项需要使用<code>GSS-API</code>或<code>SSPI</code>支持构建的库，使用<code>-V, -version</code>查看<code>curl</code>是否支持<code>GSS-API/SSPI</code>和<code>SPNEGO</code>，使用此选项时，还必须提供假<code>-u, -user</code>选项以正确激活身份验证代码，发送<code>-u</code>就足够了，因为实际上没有使用<code>-u</code>选项中的用户名和密码，如果多次使用此选项，则只使用第一个选项。</li><li><code>--no-keepalive</code>: 禁用在<code>TCP</code>连接上使用<code>keepalive</code>消息，因为默认情况下<code>curl</code>会启用它们，请注意，这是已记录的否定选项名称，因此，可以使用<code>--keepalive</code>来强制执行<code>keepalive</code>。</li><li><code>--no-sessionid</code>: <code>SSL</code>，禁用<code>curl</code>对<code>SSL</code>会话<code>ID</code>缓存的使用，默认情况下，所有传输都使用缓存完成，请注意，尽管尝试重用<code>SSL</code>会话<code>id</code>不会对任何事情造成伤害，但在野外似乎存在损坏的<code>SSL</code>实现，可能需要您禁用它才能成功，(在<code>7.16.0</code>中添加)请注意，这是已记录的否定选项名称，因此，您可以使用<code>--sessionid</code>来强制执行会话<code>ID</code>缓存。</li><li><code>--noproxy &lt;no-proxy-list&gt;</code>: 不使用代理(如果指定了代理)的主机的逗号分隔列表，唯一的通配符是一个<code>*</code>字符，它匹配所有主机，并有效地禁用代理，此列表中的每个名称都匹配为包含主机名的域或主机名本身，例如，本地网站将匹配本地网站，<code>7.19.4</code>中增加。</li><li><code>--ntlm</code>: <code>HTTP</code>，启用<code>NTLM</code>身份验证，<code>NTLM</code>身份验证方法是由<code>Microsoft</code>设计的，用于<code>IIS web</code>服务器，它是一个专有的协议，由聪明的人逆向设计，并根据他们的努力在<code>curl</code>中实现，这种行为不应该被认可，您应该鼓励每个使用<code>NTLM</code>的人转而使用公共的和文档化的身份验证方法，比如<code>Digest</code>，如果要为代理身份验证启用<code>NTLM</code>，请使用<code>--proxy NTLM</code>，此选项需要使用<code>SSL</code>支持构建的库，使用<code>-V, -version</code>查看<code>curl</code>是否支持<code>NTLM</code>，如果多次使用此选项，则只使用第一个选项。</li><li><code>-o, --output &lt;file&gt;</code>: 将输出写入<code>&lt;file&gt;</code>而不是标准输出，如果使用<code>{}</code>或<code>[]</code>获取多个文档，则可以在<code>&lt;file&gt;</code>说明符中使用<code>#</code>后跟数字，该变量将替换为正在获取的<code>URL</code>的当前字符串。</li><li><code>-O, --remote-name</code>: 将输出写入名为的本地文件，就像我们得到的远程文件一样，仅使用远程文件的文件部分，路径被切断，用于保存的远程文件名是从给定的<code>URL</code>提取的，而不是从其他<code>URL</code>提取的，因此，文件将保存在当前工作目录中，如果要将文件保存在其他目录中，请确保在使用<code>-O, -remote name</code>标志调用<code>curl</code>之前更改当前工作目录，没有对文件名执行<code>URL</code>解码，如果名称中有%<code>20</code>或其他<code>URL</code>编码的部分，它们将以文件名的形式结束，您可以使用此选项的次数与您拥有的<code>URL</code>数量相同。</li><li><code>--oauth2-bearer</code>: <code>IMAP、POP3、SMTP</code>，指定<code>OAUTH 2.0</code>服务器身份验证的承载令牌，承载令牌与用户名一起使用，用户名可以指定为<code>--url</code>或<code>-u, -user</code>选项的一部分，承载令牌和用户名根据<code>rfc6750</code>格式化，如果多次使用此选项，将使用最后一个选项。</li><li><code>--proxy-header &lt;header&gt;</code>: <code>HTTP</code>，向代理发送<code>HTTP</code>时请求中包含的额外头，您可以指定任意数量的额外标头，这是与<code>-H, -header</code>等效的选项，但仅适用于代理通信，就像在连接请求中一样，当您希望将单独的头发送到代理时，它将发送到实际的远程主机，<code>curl</code>将确保您添加<code>/</code>替换的每个标题都使用正确的行尾标记发送，因此您不应将其添加为标题内容的一部分<code>: </code>不要添加换行符或回车符，它们只会为您带来麻烦，使用此选项指定的头不会包含在<code>curl</code>知道不会发送到代理的请求中，此选项可多次用于添加<code>/</code>替换<code>/</code>删除多个标头，在<code>7.37.0</code>中添加。</li><li><code>-p, --proxytunnel</code>: 当使用<code>HTTP</code>代理(<code>-x, --proxy</code>)时，此选项将导致非<code>HTTP</code>协议尝试通过代理进行隧道传输，而不是仅使用它来执行类似<code>HTTP</code>的操作，隧道方法是通过<code>HTTP</code>代理连接请求来实现的，并且要求代理允许直接连接到<code>curl</code>希望通过隧道连接到的远程端口号。</li><li><code>-P, --ftp-port &lt;address&gt;</code>: <code>FTP</code>，在连接<code>FTP</code>时反转默认的发起程序<code>/</code>侦听程序角色，此开关使<code>curl</code>使用活动模式，在实践中，<code>curl</code>然后告诉服务器连接回客户机指定的地址和端口，而被动模式则要求服务器设置一个<code>IP</code>地址和端口以供连接。</li><li><code>--pass &lt;phrase&gt;</code>: <code>SSL/SSH</code>，私钥的密码短语，如果多次使用此选项，将使用最后一个选项。</li><li><code>--post301</code>: <code>HTTP</code>，告诉<code>curl</code>遵守<code>rfc2616/10.3.2</code>，在执行<code>301</code>重定向时不要将<code>POST</code>请求转换为<code>GET</code>请求，非<code>RFC</code>行为在<code>web</code>浏览器中无处不在，因此<code>curl</code>默认情况下进行转换以保持一致性，然而，服务器可能需要在这样的重定向之后保持<code>POST</code>，此选项仅在使用<code>-L, -location</code>(在<code>7.17.1</code>中添加)时才有意义。</li><li><code>--post302</code>: <code>HTTP</code>，告诉<code>curl</code>遵守<code>rfc2616/10.3.2</code>，在执行<code>302</code>重定向时不要将<code>POST</code>请求转换为<code>GET</code>请求，非<code>RFC</code>行为在<code>web</code>浏览器中无处不在，因此<code>curl</code>默认情况下进行转换以保持一致性，然而，服务器可能需要在这样的重定向之后保持<code>POST</code>，此选项仅在使用<code>-L, -location</code>(在<code>7.19.1</code>中添加)时才有意义。</li><li><code>--post303</code>: <code>HTTP</code>，告诉<code>curl</code>遵守<code>rfc2616/10.3.2</code>，在执行<code>303</code>重定向时不要将<code>POST</code>请求转换为<code>GET</code>请求，非<code>RFC</code>行为在<code>web</code>浏览器中无处不在，因此<code>curl</code>默认情况下进行转换以保持一致性，然而，服务器可能需要在这样的重定向之后保持<code>POST</code>，此选项仅在使用<code>-L, -location</code>(在<code>7.26.0</code>中添加)时才有意义。</li><li><code>--proto &lt;protocols&gt;</code>: 告诉<code>curl</code>使用列出的协议进行初始检索，协议从左到右求值，以逗号分隔，每个协议都是一个协议名或<code>all</code>，可以选择以零个或多个修饰符作为前缀。</li><li><code>--proto-redir &lt;protocols&gt;</code>: 告诉<code>curl</code>在重定向后使用列出的协议，有关协议的表示方式，请参见<code>--proto</code>，(<code>7.20.2</code>增加)。</li><li><code>--proxy-anyauth</code>: 告诉<code>curl</code>在与给定代理通信时选择合适的身份验证方法，这可能会导致额外的请求<code>/</code>响应往返，(<code>7.13.2</code>增加)。</li><li><code>--proxy-basic</code>: 告诉<code>curl</code>在与给定代理通信时使用<code>HTTP</code>基本身份验证，使用<code>--basic</code>对远程主机启用<code>HTTP basic</code>，<code>Basic</code>是<code>curl</code>用于代理的默认身份验证方法。</li><li><code>--proxy-digest</code>: 告诉<code>curl</code>在与给定代理通信时使用<code>HTTP</code>摘要身份验证，使用<code>--digest</code>对远程主机启用<code>HTTP</code>摘要。</li><li><code>--proxy-negotiate</code>: 告诉<code>curl</code>在与给定代理通信时使用<code>HTTP</code>协商(<code>SPNEGO</code>)身份验证，使用<code>--negotiate</code>启用与远程主机的<code>HTTP</code>协商(<code>SPNEGO</code>)，<code>7.17.1</code>增加。</li><li><code>--proxy-ntlm</code>: 告诉<code>curl</code>在与给定代理通信时使用<code>httpntlm</code>身份验证，使用<code>--ntlm</code>启用远程主机的<code>ntlm</code>。</li><li><code>--proxy1.0 &lt;proxyhost[:port]&gt;</code>: 使用指定的<code>HTTP 1.0</code>代理，如果未指定端口号，则假定在端口<code>1080</code>处，此选项与<code>HTTP proxy</code>选项<code>-x, --proxy</code>之间的唯一区别是，尝试通过代理使用<code>CONNECT</code>将指定<code>HTTP 1.0</code>协议，而不是默认的<code>HTTP 1.1</code>。</li><li><code>--pubkey &lt;key&gt;</code>: <code>SSH</code>，公钥文件名，允许您在此单独的文件中提供公钥，如果多次使用此选项，将使用最后一个选项。</li><li><code>-q</code>: 如果用作命令行上的第一个参数，则不会读取和使用<code>curlrc config</code>文件，有关默认配置文件搜索路径的详细信息，请参见<code>-K, --config</code>。</li><li><code>-Q, --quote &lt;command&gt;</code>: <code>FTP/SFTP</code>，向远程<code>FTP</code>或<code>SFTP</code>服务器发送任意命令，<code>Quote</code>命令在传输发生之前发送(确切地说，是在<code>FTP</code>传输中的初始<code>PWD</code>命令之后)，若要使命令在成功传输后执行，请在其前面加一个短划线<code>-</code>，要使命令在<code>curl</code>更改工作目录后发送，就在传输命令之前，在命令前面加上<code>+</code>(这仅适用于<code>FTP</code>)，您可以指定任意数量的命令，如果服务器返回其中一个命令失败，则整个操作将中止，必须按照<code>RFC 959</code>的定义将语法正确的<code>FTP</code>命令发送到<code>FTP</code>服务器，或将下面列出的命令之一发送到<code>SFTP</code>服务器，此选项可以多次使用，在与<code>FTP</code>服务器通信时，在命令前面加一个星号<code>*</code>，使<code>curl</code>即使失败也能继续，因为默认情况下，<code>curl</code>会在第一次失败时停止，<code>SFTP</code>是一种二进制协议，与<code>FTP</code>不同，<code>curl</code>在将<code>SFTP quote</code>命令发送到服务器之前会自己解释它们，文件名可以用<code>shell</code>样式引用以嵌入空格或特殊字符。</li><li><code>-r, --range &lt;range&gt;</code>: <code>HTTP/FTP/SFTP/FILE</code>，从<code>HTTP/1.1</code>、<code>FTP</code>或<code>SFTP</code>服务器或本地文件检索字节范围(即部分文档)，可以通过多种方式指定范围。</li><li><code>-R, --remote-time</code>: 使用时，这将使<code>curl</code>尝试找出远程文件的时间戳，如果该时间戳可用，则使本地文件获得相同的时间戳。</li><li><code>--random-file &lt;file&gt;</code>: <code>SSL</code>，指定包含随机数据的文件的路径名，数据用于为<code>SSL</code>连接的随机引擎播种，另请参见<code>--egd</code>文件选项。</li><li><code>--raw</code>: <code>HTTP</code>，使用时，它会禁用所有内容或传输编码的内部<code>HTTP</code>解码，而是让它们原封不动地传递，<code>7.16.2</code>增加。</li><li><code>--remote-name-all</code>: 此选项将更改所有给定<code>URL</code>的默认操作，使其处理方式与每个<code>URL</code>使用<code>-O</code>、<code>-remote name</code>一样，因此，如果要在使用<code>--remote name all</code>之后对特定<code>URL</code>禁用该选项，则必须使用<code>-o-</code>或<code>--no remote name</code>，在<code>7.19.0</code>中添加。</li><li><code>--resolve &lt;host:port:address&gt;</code>: 为特定主机和端口对提供自定义地址，使用此方法，可以使<code>curl</code>请求使用指定的地址，并防止使用通常解析的地址，将其视为命令行上提供的一种<code>/etc/hosts</code>替代方案，端口号应该是用于主机将用于的特定协议的编号，这意味着，如果要为同一主机提供不同端口的地址，则需要多个条目，可以多次使用此选项添加许多要解析的主机名，在<code>7.21.3</code>增加。</li><li><code>--retry &lt;num&gt;</code>: 如果<code>curl</code>尝试执行传输时返回暂时性错误，它将在放弃之前重试此次数，将数字设置为<code>0</code>将使<code>curl</code>不重试(这是默认值)，瞬时错误表示<code>: </code>超时、<code>ftp4xx</code>响应代码或<code>http5xx</code>响应代码，当<code>curl</code>将要重试传输时，它将首先等待一秒钟，然后对于所有即将进行的重试，它将加倍等待时间，直到达到<code>10</code>分钟，这将是其余重试之间的延迟，通过使用<code>--retry delay</code>可以禁用这个指数退避算法，另请参见<code>--retry max time</code>以限制允许重试的总时间，(<code>7.12.3</code>增加)如果多次使用此选项，将使用最后一个选项。</li><li><code>--retry-delay &lt;seconds&gt;</code>: 当传输因暂时性错误而失败时，在每次重试之前使<code>curl</code>休眠此时间量(它会更改重试之间的默认退避时间算法)，只有同时使用<code>--retry</code>时，此选项才有意义，将此延迟设置为零将使<code>curl</code>使用默认回退时间，(<code>7.12.3</code>增加)如果多次使用此选项，将使用最后一个选项。</li><li><code>--retry-max-time &lt;seconds&gt;</code>: 重试计时器在第一次传输尝试之前重置，只要计时器没有达到这个给定的限制，重试就会照常进行(请参阅<code>--retry</code>)，请注意，如果计时器尚未达到限制，则会发出请求，并且在执行时，可能需要比给定的时间段更长的时间，要限制单个请求的最长时间，请使用<code>-m, -max time</code>，将此选项设置为零以不超时重试，(<code>7.12.3</code>增加)如果多次使用此选项，将使用最后一个选项。</li><li><code>-s, --silent</code>: 安静或安静模式，不显示进度表或错误消息，使卷发静音，它仍然会输出您请求的数据，甚至可能输出到终端<code>/stdout</code>，除非您重定向它。</li><li><code>--sasl-ir</code>: 在<code>SASL</code>身份验证中启用初始响应，在<code>7.31.0</code>增加。</li><li><code>-S, --show-error</code>: 当与<code>-s</code>一起使用时，如果<code>curl</code>失败，它将显示一条错误消息。</li><li><code>--ssl</code>: <code>FTP, POP3, IMAP, SMTP</code>，尝试使用<code>SSL/TLS</code>进行连接，如果服务器不支持<code>SSL/TLS</code>，则还原为非安全连接，另请参见<code>--ftp ssl control</code>和<code>--ssl reqd</code>以了解所需的不同加密级别，(在<code>7.20.0</code>中添加)此选项以前称为<code>--ftp ssl</code>(在<code>7.11.0</code>中添加)，该选项名称仍可以使用，但将在将来的版本中删除。</li><li><code>--ssl-reqd</code>: <code>FTP, POP3, IMAP, SMTP</code>，连接需要<code>SSL/TLS</code>，如果服务器不支持<code>SSL/TLS</code>，则终止连接，(在<code>7.20.0</code>中添加)此选项以前称为<code>--ftp ssl reqd</code>(在<code>7.15.5</code>中添加)，该选项名称仍可以使用，但将在将来的版本中删除。</li><li><code>--ssl-allow-beast</code>: <code>SSL</code>，此选项告诉<code>curl</code>不要绕过<code>SSL3</code>和<code>TLS1.0</code>协议中称为<code>BEAST</code>的安全缺陷，如果不使用此选项，<code>SSL</code>层可能会使用已知的解决方法来解决某些较旧的<code>SSL</code>实现的互操作性问题，警告<code>: </code>此选项会降低<code>SSL</code>安全性，通过使用此标志，您会要求完全相同的安全性，在<code>7.25.0</code>中添加。</li><li><code>--socks4 &lt;host[:port]&gt;</code>: 使用指定的<code>SOCKS4</code>代理，如果未指定端口号，则假定在端口<code>1080</code>处，(<code>7.15.2</code>增加)此选项将覆盖以前使用的任何<code>-x, --proxy</code>，因为它们是互斥的，从<code>7.21.7</code>开始，此选项是多余的，因为您可以使用<code>socks4://</code>协议前缀指定具有<code>-x, --proxy</code>的<code>socks4</code>代理，如果多次使用此选项，将使用最后一个选项。</li><li><code>--socks4a &lt;host[:port]&gt;</code>: 使用指定的<code>SOCKS4a</code>代理，如果未指定端口号，则假定在端口<code>1080</code>处，(在<code>7.18.0</code>中添加)此选项将覆盖以前使用的任何<code>-x, --proxy</code>，因为它们是互斥的，从<code>7.21.7</code>开始，此选项是多余的，因为您可以使用<code>socks4a://</code>协议前缀指定具有<code>-x, -proxy</code>的<code>socks4a</code>代理，如果多次使用此选项，将使用最后一个选项。</li><li><code>--socks5-hostname &lt;host[:port]&gt;</code>: 使用指定的<code>SOCKS5</code>代理(并让代理解析主机名)，如果未指定端口号，则假定在端口<code>1080</code>处，(在<code>7.18.0</code>中添加)此选项将覆盖以前使用的任何<code>-x, --proxy</code>，因为它们是互斥的，从<code>7.21.7</code>开始，此选项是多余的，因为您可以使用<code>socks5h://</code>协议前缀指定带有<code>-x, -proxy</code>的<code>socks5</code>主机名代理，如果多次使用此选项，将使用最后一个选项，(此选项以前被错误地记录并用作<code>--socks</code>，但没有附加数字)。</li><li><code>--socks5 &lt;host[:port]&gt;</code>: 使用指定的<code>SOCKS5</code>代理<code>-</code>但在本地解析主机名，如果未指定端口号，则假定在端口<code>1080</code>处，此选项将覆盖以前使用的任何<code>-x, --proxy</code>，因为它们是互斥的，从<code>7.21.7</code>开始，此选项是多余的，因为您可以使用<code>socks5://</code>协议前缀指定带有<code>-x, -proxy</code>的<code>socks5</code>代理，如果多次使用此选项，将使用最后一个选项，(此选项以前被错误地记录并用作<code>--socks</code>，但没有附加数字)，此选项(以及<code>--socks4</code>)不适用于<code>IPV6</code>、<code>FTPS</code>或<code>LDAP</code>。</li><li><code>--socks5-gssapi-service &lt;servicename&gt;</code>: <code>socks</code>服务器的默认服务名称是<code>rcmd/server fqdn</code>，此选项允许您更改它，示例<code>: ---socks5 proxy name--socks5 gssapi service sockd</code>将使用<code>sockd/proxy name--socks5 proxy name--socks5 gssapi service sockd/real name</code>将在代理名称与主体名称不匹配的情况下使用<code>sockd/real name</code>，在<code>7.19.4</code>中增加。</li><li><code>--socks5-gssapi-nec</code>: 作为<code>GSS-API</code>协商的一部分，将协商保护模式，<code>RFC1961</code>在第<code>4.3/4.4</code>节中说它应该受到保护，但<code>NEC</code>参考实施没有，选项<code>--socks5 gssapi nec</code>允许保护模式协商的无保护交换，在<code>7.19.4</code>中增加。</li><li><code>--stderr &lt;file&gt;</code>: 将对<code>stderr</code>的所有写入重定向到指定的文件，如果文件名是一个普通的<code>-</code>，则改为写入标准输出，如果多次使用此选项，将使用最后一个选项。</li><li><code>-t, --telnet-option &lt;OPT=val&gt;</code>: 将选项传递给<code>telnet</code>协议，支持的选项包括<code>: TTYPE=&lt;term&gt;</code>设置终端类型，<code>XDISPLOC=&lt;X display&gt;</code>设置<code>X</code>显示位置，<code>NEW_ENV=&lt;var, val&gt;</code>设置环境变量。</li><li><code>-T, --upload-file &lt;file&gt;</code>: 这会将指定的本地文件传输到远程<code>URL</code>，如果指定的<code>URL</code>中没有文件部分，<code>curl</code>将附加本地文件名，请注意，您必须在最后一个目录上使用尾随<code>/</code>来真正证明<code>curl</code>没有文件名，否则<code>curl</code>会认为您的最后一个目录名是要使用的远程文件名，这很可能会导致上载操作失败，如果在<code>HTTP</code>(<code>S</code>)服务器上使用，则将使用<code>PUT</code>命令，使用文件名<code>-</code>来使用<code>stdin</code>而不是给定的文件，或者，可以指定文件名<code>.</code>(单个句点)而不是<code>-</code>，以便在非阻塞模式下使用<code>stdin</code>，以便在上载<code>stdin</code>时读取服务器输出。</li><li><code>--tcp-nodelay</code>: 打开<code>TCP_NODELAY</code>选项，有关此选项的详细信息，请参阅<code> curl_easy_setopt</code>手册页，在<code>7.11.2</code>增加。</li><li><code>--tftp-blksize &lt;value&gt;</code>: <code>TFTP</code>，设置<code>TFTP BLKSIZE</code>选项(必须大于<code>512</code>)，这是<code>curl</code>在向<code>TFTP</code>服务器传输数据或从<code>TFTP</code>服务器传输数据时尝试使用的块大小，默认情况下，将使用<code>512</code>字节，如果多次使用此选项，将使用最后一个选项，在<code>7.20.0</code>中添加。</li><li><code>--tlsauthtype &lt;authtype&gt;</code>: 设置<code>TLS</code>身份验证类型，目前，<code>TLS-SRP</code>(<code>RFC 5054</code>)唯一支持的选项是<code>SRP</code>，如果指定了<code>--tlsuser</code>和<code>--tlspassword</code>，但未指定<code>--tlsauthtype</code>，则此选项默认为<code>SRP</code>，在<code>7.21.4</code>增加。</li><li><code>--tlspassword &lt;password&gt;</code>: 设置密码以用于用<code>--tlsauthtype</code>指定的<code>TLS</code>身份验证方法，要求同时设置<code>--tlsuser</code>，在<code>7.21.4</code>增加。</li><li><code>--tlsuser &lt;user&gt;</code>: 设置用户名以便与用<code>--tlsauthtype</code>指定的<code>TLS</code>身份验证方法一起使用，要求同时设置<code>--tlspassword</code>，在<code>7.21.4</code>增加。</li><li><code>--tlsv1.0</code>: <code>SSL</code>，强制<code>curl</code>在与远程<code>TLS</code>服务器协商时使用<code>TLS</code>版本<code>1.0</code>，在<code>7.34.0</code>中添加。</li><li><code>--tlsv1.1</code>: <code>SSL</code>，强制<code>curl</code>在与远程<code>TLS</code>服务器协商时使用<code>TLS</code>版本<code>1.1</code>，在<code>7.34.0</code>中添加。</li><li><code>--tlsv1.2</code>: <code>SSL</code>，强制<code>curl</code>在与远程<code>TLS</code>服务器协商时使用<code>TLS</code>版本<code>1.2</code>，在<code>7.34.0</code>中添加。</li><li><code>--tr-encoding</code>: <code>HTTP</code>，使用<code>curl</code>支持的算法之一请求压缩传输编码响应，并在接收数据时解压缩数据，在<code>7.21.6</code>增加。</li><li><code>--trace &lt;file&gt;</code>: 启用所有传入和传出数据(包括描述性信息)到给定输出文件的完整跟踪转储，使用<code>-</code>作为文件名将输出发送到<code>stdout</code>，此选项覆盖以前使用的<code>-v, -verbose</code>或<code>-trace ascii</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--trace-ascii &lt;file&gt;</code>: 启用所有传入和传出数据(包括描述性信息)到给定输出文件的完整跟踪转储，使用<code>-</code>作为文件名将输出发送到<code>stdout</code>，这与<code>--trace</code>非常相似，但是省略了十六进制部分，只显示转储的<code>ASCII</code>部分，它使较小的输出，可能更容易阅读未经训练的人，此选项覆盖以前使用的<code>-v</code>、<code>-verbose</code>或<code>-trace</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--trace-time</code>: 为<code>curl</code>显示的每个跟踪或详细行预先准备一个时间戳，在<code>7.14.0</code>中添加。</li><li><code>-u, --user &lt;user:password&gt;</code>: 指定用于服务器身份验证的用户名和密码，重写<code>-n</code>、<code>-netrc</code>和<code>--netrc</code>可选，如果只指定用户名，<code>curl</code>将提示输入密码，用户名和密码在第一个冒号上分开，这样就不可能在用户名中使用带有此选项的冒号，密码仍然可以，将<code>Kerberos V5</code>与基于<code>Windows</code>的服务器一起使用时，应在用户名中包含<code>Windows</code>域名，以便服务器成功获取<code>Kerberos</code>票证，如果不这样做，那么初始身份验证握手可能会失败，当使用<code>NTLM</code>时，可以简单地将用户名指定为用户名，而不指定域。</li><li><code>-U, --proxy-user &lt;user:password&gt;</code>: 指定用于代理身份验证的用户名和密码，如果您使用启用了<code>Windows SSPI</code>的<code>curl</code>二进制文件并进行协商或<code>NTLM</code>身份验证，那么您可以通过指定一个冒号来告诉<code>curl</code>从您的环境中选择用户名和密码，该冒号带有以下选项:<code>-U</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>--url &lt;URL&gt;</code>: 指定要获取的<code>URL</code>，当您要在配置文件中指定<code>URL</code>时，此选项非常方便，此选项可以使用任意次数，要控制此<code>URL</code>的写入位置，请使用<code>-o, --output</code>或<code>-o, --remote name</code>选项。</li><li><code>-v, --verbose</code>: 输出详细信息，主要用于调试，以<code>&gt;</code>开头的行表示<code>curl</code>发送的头数据，<code>&lt;</code>表示<code>curl</code>接收的在正常情况下隐藏的头数据，以*开头的行表示<code>curl</code>提供的附加信息，请注意，如果您只希望在输出中使用<code>HTTP</code>头，那么您可能需要<code>-i, -include</code>选项，如果您认为此选项仍然不能提供足够的详细信息，请考虑改用<code>--trace</code>或<code>--trace ascii</code>，此选项覆盖以前使用的<code>--trace ascii</code>或<code>--trace</code>，使用<code>-s, --silent</code>使<code>curl</code>安静。</li><li><code>-w, --write-out &lt;format&gt;</code>: 定义操作完成并成功后在标准输出上显示的内容，格式是一个字符串，可以包含纯文本和任意数量的变量，字符串可以指定为<code>string</code>，要从特定文件中读取，您可以将其指定为<code>@filename</code>，并告诉<code>curl</code>从<code>stdin</code>中读取格式，您可以编写<code>@-</code>，输出格式中的变量将被<code>curl</code>认为合适的值或文本替换，如下所述，所有变量都指定为%<code>{variable_name}</code>，要输出一个普通的%只需将它们写为%%，您可以使用<code>\\n</code>、带<code>\\r</code>的回车符和带<code>\\t</code>的制表符来输出换行符，可能的值为<code>content_type</code>、<code>filename_effective</code>、<code>ftp_entry_path</code>、<code>http_code</code>、<code>http_connect</code>、<code>local_ip</code>、<code>local_port</code>、<code>num_connects</code>、<code>num_redirects</code>、<code>redirect_url</code>、<code>remote_ip</code>、<code>remote_port</code>、<code>size_download</code>、<code>size_header</code>、<code>size_request</code>、<code>size_upload</code>、<code>speed_download</code>、<code>speed_upload</code>、<code>ssl_verify_result</code>、<code>time_appconnect</code>、<code>time_connect</code>、<code>time_namelookup</code>、<code>time_pretransfer</code>、<code>time_redirect</code>、<code>time_starttransfer</code>、<code>time_total</code>、<code>url_effective</code>。</li><li><code>-x, --proxy &lt;[protocol://][user:password@]proxyhost[:port]&gt;</code>: 使用指定的代理，可以使用<code>protocol://</code>前缀指定代理字符串，以指定备用代理协议，使用<code>socks4://</code>、<code>socks4a://</code>、<code>socks5://</code>或<code>socks5h://</code>请求要使用的特定<code>SOCKS</code>版本，没有指定协议，<code>http://</code>和所有其他协议都将被视为<code>http</code>代理，(在<code>curl7.21.7</code>中添加了协议支持)如果代理字符串中未指定端口号，则假定端口号为<code>1080</code>，此选项将覆盖将代理设置为使用的现有环境变量，如果有环境变量设置代理，则可以将代理设置为以覆盖它，通过<code>HTTP</code>代理执行的所有操作都将透明地转换为<code>HTTP</code>，这意味着某些特定于协议的操作可能不可用，如果您可以通过代理进行隧道传输(如使用<code>-p</code>、<code>-proxytunnel</code>选项时)，则情况并非如此，代理字符串中可能提供的用户和密码由<code>curl</code>进行<code>URL</code>解码，这允许您通过使用<code>%40</code>传入特殊字符，如<code>@</code>，或用<code>%3a</code>传入冒号，可以使用与代理环境变量完全相同的方式指定代理主机，包括协议前缀(<code>http://</code>)和嵌入的用户<code>+</code>密码，如果多次使用此选项，将使用最后一个选项。</li><li><code>-X, --request &lt;command&gt;</code>: <code>HTTP</code>，指定与<code>HTTP</code>服务器通信时要使用的自定义请求方法，将使用指定的请求，而不是使用其他方法(默认为<code>GET</code>)，有关详细信息和解释，请阅读<code>HTTP1.1</code>规范，常见的附加<code>HTTP</code>请求包括<code>PUT</code>和<code>DELETE</code>，但<code>WebDAV</code>等相关技术提供了<code>PROPFIND</code>、<code>COPY</code>、<code>MOVE</code>等功能，通常你不需要这个选项，各种<code>GET</code>、<code>HEAD</code>、<code>POST</code>和<code>PUT</code>请求都是通过使用专用的命令行选项来调用的，此选项仅更改<code>HTTP</code>请求中使用的实际单词，不改变<code>curl</code>的行为方式，因此，例如，如果您想要发出一个正确的<code>HEAD</code>请求，那么使用<code>-X HEAD</code>将是不够的，你需要使用<code>-I, -head</code>选项。</li><li><code>--xattr</code>: 将输出保存到文件时，此选项告诉<code>curl</code>将某些文件元数据存储在扩展文件属性中，当前，<code>URL</code>存储在<code>xdg.origin.url</code>属性，对于<code>HTTP</code>，内容类型存储在<code>mime</code>类型属性中，如果文件系统不支持扩展属性，将发出警告。</li><li><code>-y, --speed-time &lt;time&gt;</code>: 如果在某个速度时间段内下载速度低于每秒的速度限制字节数，则下载将被中止，如果使用速度时间，则默认速度限制将为<code>1</code>，除非使用<code>-Y</code>设置，此选项控制传输，因此不会影响慢速连接等，如果您担心此问题，请尝试<code>--connect timeout</code>选项，如果多次使用此选项，将使用最后一个选项。</li><li><code>-Y, --speed-limit &lt;speed&gt;</code>: 如果下载速度低于此给定速度(以字节<code>/</code>秒为单位)达数秒，则会中止下载，速度时间设置为<code>-y</code>，如果未设置，则为<code>30</code>，如果多次使用此选项，将使用最后一个选项。</li><li><code>-z, --time-cond &lt;date expression&gt;|&lt;file&gt;</code>: (<code>HTTP/FTP</code>)请求在给定的时间和日期之后修改的文件，或在该时间之前修改的文件，<code>&lt;date expression&gt;</code>可以是各种日期字符串，或者如果它与任何内部字符串都不匹配，则将其作为文件名并尝试从<code>&lt;file&gt;</code>获取修改日期<code>mtime</code>，有关日期表达式的详细信息，请参阅<code>getdate</code>手册页，以破折号<code>-</code>开始日期表达式，使其请求比给定日期<code>/</code>时间早的文档，默认值是比指定日期<code>/</code>时间新的文档，如果多次使用此选项，将使用最后一个选项。</li><li><code>-h, --help</code>: 输出帮助信息。</li><li><code>-M, --manual</code>: 手动模式，显示详细的帮助文本。</li><li><code>-V, --version</code>: 输出版本信息。</li></ul><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><p>使用环境变量设置代理与使用<code>--proxy</code>选项具有相同的效果。</p><ul><li><code>http_proxy [protocol://]&lt;host&gt;[:port]</code>: 设置用于<code>HTTP</code>的代理服务器。</li><li><code>HTTPS_PROXY [protocol://]&lt;host&gt;[:port]</code>: 设置用于<code>HTTPS</code>的代理服务器。</li><li><code>[url-protocol]_PROXY [protocol://]&lt;host&gt;[:port]</code>: 设置要用于<code>[url protocol]</code>的代理服务器，其中协议是<code>curl</code>支持的协议，并在<code>url</code>中指定，<code>FTP</code>、<code>FTPS</code>、<code>POP3</code>、<code>IMAP</code>、<code>SMTP</code>、<code>LDAP</code>等。</li><li><code>ALL_PROXY [protocol://]&lt;host&gt;[:port]</code>: 如果未设置协议特定的代理，则设置要使用的代理服务器。</li><li><code>NO_PROXY &lt;comma-separated list of hosts&gt;</code>: 不应通过任何代理的主机名列表，如果仅设置为星号<code>*</code>，则与所有主机匹配。</li></ul><h2 id="代理协议前缀" tabindex="-1"><a class="header-anchor" href="#代理协议前缀"><span>代理协议前缀</span></a></h2><ul><li><code>socks4://</code>: 使其等效于<code>--socks4</code>。</li><li><code>socks4a://</code>: 使其相当于<code>--socks4a</code>。</li><li><code>socks5://</code>: 使其相当于<code>--socks5</code>。</li><li><code>socks5h://</code>: 使其相当于<code>--socks5-hostname</code>。</li></ul><h2 id="退出代码" tabindex="-1"><a class="header-anchor" href="#退出代码"><span>退出代码</span></a></h2><ul><li><code>1</code>: 不支持的协议，<code>curl</code>的这个版本不支持这个协议。</li><li><code>2</code>: 初始化失败。</li><li><code>3</code>: <code>URL</code>格式不正确，语法不正确。</li><li><code>4</code>: 执行所需请求所需的功能或选项在生成时未启用或显式禁用，要使<code>curl</code>能够做到这一点，您可能需要另一个<code>libcurl</code>构建。</li><li><code>5</code>: 无法解析代理，无法解析给定的代理主机。</li><li><code>6</code>: 无法解析主机，未解析给定的远程主机。</li><li><code>7</code>: 无法连接到主机。</li><li><code>8</code>: <code>FTP</code>服务器回复，服务器发送的数据无法解析。</li><li><code>9</code>: <code>FTP</code>访问被拒绝，服务器拒绝登录或拒绝访问您要访问的特定资源或目录，通常，您试图更改到服务器上不存在的目录。</li><li><code>11</code>: 通过回复，<code>curl</code>无法分析发送给<code>PASS</code>请求的回复。</li><li><code>13</code>: <code>FTP</code>奇怪的<code>PASV</code>回复，<code>curl</code>无法解析发送到<code>PASV</code>请求的回复。</li><li><code>14</code>: <code>FTP-227</code>格式，<code>curl</code>无法解析服务器发送的<code>227</code>行。</li><li><code>15</code>: <code>FTP</code>无法获取主机，无法解析<code>227</code>行中的主机<code>IP</code>。</li><li><code>17</code>: <code>FTP</code>无法设置二进制文件，无法将传输方法更改为二进制。</li><li><code>18</code>: 部分文件，只传输了文件的一部分。</li><li><code>19</code>: <code>FTP</code>无法下载<code>/</code>访问给定文件，<code>RETR</code>(或类似)命令失败。</li><li><code>21</code>: <code>FTP</code>报价错误，<code>quote</code>命令从服务器返回错误。</li><li><code>22</code>: 未检索到<code>HTTP</code>页，找不到请求的<code>url</code>或返回另一个错误，<code>HTTP</code>错误代码为<code>400</code>或更高，此返回代码仅在使用<code>-f, -fail</code>时出现。</li><li><code>23</code>: 写入错误，<code>curl</code>无法将数据写入本地文件系统或类似文件系统。</li><li><code>25</code>: <code>FTP</code>无法保存文件，服务器拒绝了用于<code>FTP</code>上载的<code>STOR</code>操作。</li><li><code>26</code>: 读取错误，各种各样的阅读问题。</li><li><code>27</code>: 内存不足，内存分配请求失败。</li><li><code>28</code>: 操作超时，已根据条件达到指定的超时期限。</li><li><code>30</code>: <code>FTP</code>端口失败，端口命令失败，并非所有<code>FTP</code>服务器都支持<code>PORT</code>命令，请尝试使用<code>PASV</code>进行传输。</li><li><code>31</code>: <code>FTP</code>无法使用<code>REST</code>，<code>REST</code>命令失败，此命令用于恢复<code>FTP</code>传输。</li><li><code>33</code>: <code>HTTP</code>范围错误，范围命令不起作用。</li><li><code>34</code>: <code>HTTP post</code>错误，内部<code>post</code>请求生成错误。</li><li><code>35</code>: <code>SSL</code>连接错误，<code>SSL</code>握手失败。</li><li><code>36</code>: <code>FTP</code>错误下载恢复，无法继续先前中止的下载。</li><li><code>37</code>: <code>FILE</code>无法读取文件，无法打开文件，可能是权限问题。</li><li><code>38</code>: <code>LDAP</code>无法绑定，<code>LDAP</code>绑定操作失败。</li><li><code>39</code>: <code>LDAP</code>搜索失败。</li><li><code>41</code>: 未找到函数，找不到所需的<code>LDAP</code>函数。</li><li><code>42</code>: 被回调中止，一个应用程序告诉<code>curl</code>中止操作。</li><li><code>43</code>: 内部错误，使用错误的参数调用了函数。</li><li><code>45</code>: 接口错误，无法使用指定的传出接口。</li><li><code>47</code>: 重定向过多，跟随重定向时，<code>curl</code>达到最大数量。</li><li><code>48</code>: 为<code>libcurl</code>指定了未知选项，这表示您向<code>curl</code>传递了一个奇怪的选项，该选项被传递给<code>libcurl</code>并被拒绝，仔细阅读手册。</li><li><code>49</code>: <code>telnet</code>选项格式错误。</li><li><code>51</code>: 对等方的<code>SSL</code>证书或<code>SSH MD5</code>指纹不正常。</li><li><code>52</code>: 服务器没有回复任何内容，这被认为是一个错误。</li><li><code>53</code>: 找不到<code>SSL</code>加密引擎。</li><li><code>54</code>: 无法将<code>SSL</code>加密引擎设置为默认值。</li><li><code>55</code>: 发送网络数据失败。</li><li><code>56</code>: 接收网络数据失败。</li><li><code>58</code>: 本地证书有问题。</li><li><code>59</code>: 无法使用指定的<code>SSL</code>密码。</li><li><code>60</code>: 对等证书不能用已知的<code>CA</code>证书进行身份验证。</li><li><code>61</code>: 无法识别的传输编码。</li><li><code>62</code>: <code>LDAP URL</code>无效。</li><li><code>63</code>: 超过最大文件大小。</li><li><code>64</code>: 请求的<code>FTP SSL</code>级别失败。</li><li><code>65</code>: 发送数据需要倒带失败。</li><li><code>66</code>: 无法初始化<code>SSL</code>引擎。</li><li><code>67</code>: 用户名、密码或类似内容未被接受，<code>curl</code>无法登录。</li><li><code>68</code>: 在<code>TFTP</code>服务器上找不到文件。</li><li><code>69</code>: <code>TFTP</code>服务器上的权限问题。</li><li><code>70</code>: <code>TFTP</code>服务器上的磁盘空间不足。</li><li><code>71</code>: <code>TFTP</code>操作非法。</li><li><code>72</code>: 未知的<code>TFTP</code>传输<code>ID</code>。</li><li><code>73</code>: 文件已存在<code>TFTP</code>。</li><li><code>74</code>: 没有这样的用户<code>TFTP</code>。</li><li><code>75</code>: 字符转换失败。</li><li><code>76</code>: 需要字符转换函数。</li><li><code>77</code>: 读取<code>SSL CA</code>证书(路径)时出现问题，可能是访问权限问题。</li><li><code>78</code>: <code>URL</code>中引用的资源不存在。</li><li><code>79</code>: <code>SSH</code>会话期间发生未指定的错误。</li><li><code>80</code>: 无法关闭<code>SSL</code>连接。</li><li><code>82</code>: 无法加载<code>CRL</code>文件，缺少或格式错误，在<code>7.19.0</code>中添加。</li><li><code>83</code>: 发卡机构检查失败，在<code>7.19.0</code>中添加。</li><li><code>84</code>: <code>FTP PRET</code>命令失败。</li><li><code>85</code>: <code>RTSP:CSeq</code>编号不匹配。</li><li><code>86</code>: <code>RTSP</code>会话标识符不匹配。</li><li><code>87</code>: 无法解析<code>FTP</code>文件列表。</li><li><code>88</code>: <code>FTP</code>区块回调报告错误。</li><li><code>89</code>: 没有可用的连接，会话将排队。</li><li><code>XX</code>: 更多的错误代码将出现在这里，在未来的版本，现有的是永远不会改变的。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>对网站发起一个<code>HTTP</code>请求。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使<code>curl</code>显示进度表，以指示传输速率、传输的数据量、剩余时间等。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -<span class="token comment"># -o ftp://ftp.example.com/file.zip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定请求的网络接口。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--interface</span> ppp0 <span class="token number">192.168</span>.113.131
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将文件下载到本地并命名为<code>1.zip</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-o</span> <span class="token number">1</span>.zip ftp://ftp.example.com/file.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让<code>curl</code>使用地址重定向。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> http://www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此选项限制数据传输速率的上限，并将其保持在以字节为单位的给定值附近。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> --limit-rate 1000K <span class="token parameter variable">-O</span> ftp://speedtest.tele2.net/1MB.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>curl</code>还提供了从用户认证的<code>FTP</code>服务器下载文件的选项。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-u</span> username:password <span class="token parameter variable">-O</span> ftp://test.rebex.net/readme.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示详细信息，例如连接的<code>ip</code>地址、请求头与响应头等。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-v</span> www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置请求头信息，此处由于响应信息过多将其存储在<code>baidu.html</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-H</span> <span class="token string">&quot;Accept-Language: zh-cn&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-H</span> <span class="token string">&quot;Host: www.baidu.com&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-H</span> <span class="token string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-o</span> baidu.html https://www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),t=[i];function a(s,r){return c(),o("div",null,t)}const u=e(l,[["render",a],["__file","curl命令.html.vue"]]),p=JSON.parse('{"path":"/MacOS/Terminal/curl%E5%91%BD%E4%BB%A4.html","title":"curl命令","lang":"zh-CN","frontmatter":{"description":"curl命令 curl是一个命令行工具，用于使用任何受支持的协议HTTP、FTP、IMAP、POP3、SCP、SFTP、SMTP、TFTP、TELNET、LDAP或FILE向网络服务器传输数据或从网络服务器传输数据，其被设计成无需用户交互即可工作，因此非常适合在shell脚本中使用，该软件提供代理支持、用户身份验证、FTP上传、HTTP posting...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/curl%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"curl命令"}],["meta",{"property":"og:description","content":"curl命令 curl是一个命令行工具，用于使用任何受支持的协议HTTP、FTP、IMAP、POP3、SCP、SFTP、SMTP、TFTP、TELNET、LDAP或FILE向网络服务器传输数据或从网络服务器传输数据，其被设计成无需用户交互即可工作，因此非常适合在shell脚本中使用，该软件提供代理支持、用户身份验证、FTP上传、HTTP posting..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"curl命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":2,"title":"代理协议前缀","slug":"代理协议前缀","link":"#代理协议前缀","children":[]},{"level":2,"title":"退出代码","slug":"退出代码","link":"#退出代码","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":58.44,"words":17532},"filePathRelative":"MacOS/Terminal/curl命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{u as comp,p as data};
