import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as d,j as o,z as c}from"./app-lp0sOEvl.js";const a={},l=c(`<h1 id="journalctl命令" tabindex="-1"><a class="header-anchor" href="#journalctl命令"><span>journalctl命令</span></a></h1><p><code>journalctl</code>命令是<code>Systemd</code>日志系统的一个命令，主要用途是用来查看通过<code>Systemd</code>日志系统记录的日志，在<code>Systemd</code>出现之前，<code>Linux</code>系统及各应用的日志都是分别管理的，<code>Systemd</code>取代了<code>initd</code>之后便开始统一管理了所有<code>Unit</code>的启动日志，可以只用一个<code>journalctl</code>命令，查看所有内核和应用的日志。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>MATCHES<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>--no-full, --full, -l</code>: 当字段匹配可用列时将其省略，默认设置是显示完整字段，允许它们换行或被截断，旧的选项<code>-l/--full</code>不再有用，除了撤销<code>--no-full</code>。</li><li><code>-a, --all</code>: 完整显示所有字段，即使它们包含不可打印字符或非常长。</li><li><code>-f, --follow</code>: 仅显示最近的日志条目，并在新条目附加到日志时连续打印。</li><li><code>-e, --pager-end</code>: 立即跳到日志的结尾内隐含的工具，这意味着<code>-n 1000</code>可以保证分页器不会缓冲大小不受限制的日志，可以在命令行中使用显式的<code>-n</code>和其他一些数值来覆盖它，注意，这个选项只支持<code>less</code>页。</li><li><code>-n, --lines=</code>: 显示最近的日志事件并限制显示的事件数，如果使用<code>--follow</code>，则隐含此选项，参数为正整数，是可选的，默认为<code>10</code>。</li><li><code>--no-tail</code>: 显示所有存储的输出行，即使在<code>follow</code>模式下也是如此，撤消<code>--line=</code>的效果。</li><li><code>-r, --reverse</code>: 反转输出，以便首先显示最新的条目。</li><li><code>-o, --output=</code>: 控制所显示的日志条目的格式，采用以下选项之一： <ul><li><code>short</code>: 默认值，并生成与经典<code>syslog</code>文件格式基本相同的输出，每个日志条目显示一行。</li><li><code>short-iso</code>: 与<code>short</code>非常相似，但显示<code>ISO 8601 wallclock</code>时间戳。</li><li><code>short-precise</code>: 与<code>short</code>非常相似，但是以微秒的精度显示时间戳。</li><li><code>short-monotonic</code>: 非常相似，但是显示的是<code>monotonic</code>的时间戳，而不是<code>wallclock</code>的时间戳。</li><li><code>verbose</code>: 显示具有所有字段的完整结构条目。</li><li><code>export</code>: 将日志序列化成适合备份和网络传输的二进制流，主要是基于文本的。</li><li><code>json</code>: 将条目格式化为<code>JSON</code>数据结构，每行一个。</li><li><code>json-pretty</code>: 将条目格式化为JSON数据结构，但将它们格式化为多行，以使人们更容易阅读。</li><li><code>json-sse</code>: 将条目格式化为<code>JSON</code>数据结构，但将它们包装为适合服务器发送的<code>Eventsm</code>的格式。</li><li><code>cat</code>: 生成一个非常简洁的输出，只显示每个日志条目的实际消息，没有元数据，甚至没有时间戳。</li></ul></li><li><code>-x, --catalog</code>: 用来自消息目录的解释文本扩充日志行，这将向输出中可用的日志消息中添加解释性帮助文本，这些简短的帮助文本将解释错误或日志事件的上下文、可能的解决方案，以及指向支持论坛、开发人员文档和任何其他相关手册的指针，注意，帮助文本不是对所有消息都可用，而是仅对选定的消息可用。此外，将<code>journalctl</code>输出附加到错误报告时，请不要使用<code>-x</code>。</li><li><code>-q, --quiet</code>: 当以普通用户身份运行时，禁止显示有关不可访问的系统日志的任何警告消息。</li><li><code>-m, --merge</code>: 显示所有可用的日志，包括远程日志的交叉条目。</li><li><code>-b [ID][±offset], --boot=[ID][±offset]</code>: 显示来自特定启动的消息，这将为<code>_BOOT_ID=</code>添加匹配项，参数可能为空，在这种情况下，将显示当前引导的日志，如果省略引导<code>ID</code>，则正偏移量将查找从日志开始的引导，而等于或小于零的偏移量将查找从日志结束的引导，因此，<code>1</code>表示按时间顺序在日志中找到的第一个引导，<code>2</code>表示第二个引导，依此类推，而<code>-0</code>表示最后一个引导，<code>-1</code>表示最后一个引导之前的引导，依此类推，空偏移量等同于指定<code>-0</code>，除非当前引导不是最后一次引导，例如因为指定<code>--directory</code>查看来自不同计算机的日志。如果指定了<code>32</code>个字符的<code>ID</code>，则可以选择后跟偏移量，该偏移量标识相对于<code>boot ID</code>给定的引导，负值表示较早的引导，正值表示较晚的引导，如果未指定<code>offset</code>，则假定值为零，并显示<code>ID</code>给定的引导日志。</li><li><code>--list-boots</code>: 显示引导编号(相对于当前引导)、它们的<code>id</code>以及与引导相关的第一条和最后一条消息的时间戳的列表。</li><li><code>-k, --dmesg</code>: 只显示内核消息，这意味着<code>-b</code>并添加匹配<code>_TRANSPORT=kernel</code>。</li><li><code>-u, --unit=UNIT|PATTERN</code>: 显示指定的<code>systemd</code>单元单元的消息，或任何与<code>PATTERN</code>匹配的单元的消息，如果指定了模式，日志中找到的单元名称列表将与指定的模式进行比较，并使用所有匹配的内容，对于每个单元名，将为来自该单元的消息添加一个匹配<code>_SYSTEMD_UNIT= unit</code>，以及来自<code>systemd</code>的消息和关于指定单元的<code>coredumps</code>的消息的额外匹配，该参数可以指定多次。</li><li><code>--user-unit=</code>: 显示指定用户会话单元的消息，这将为来自单元的消息<code>_SYSTEMD_USER_UNIT=</code>和<code>_UID=</code>添加匹配，并为来自会话<code>systemd</code>的消息和关于指定单元的<code>coredumps</code>的消息添加额外匹配，该参数可以指定多次。</li><li><code>-p, --priority=</code>: 根据消息优先级或优先级范围筛选输出，接受单个数字或文本日志级别(即在<code>0 emerg</code>和<code>7 debug</code>之间)，或以<code>..</code>形式表示的<code>numeric/text</code>日志级别范围，日志级别是<code>syslog</code>中记录的通常的<code>syslog</code>日志级别，即<code>emerg 0</code>、<code>alert 1</code>、<code>crit 2</code>、<code>err 3</code>、<code>warning 4</code>、<code>notice 5</code>、<code>info 6</code>、<code>debug 7</code>，如果指定一个日志级别，则显示该级别或更低(值更低优先级更高)日志级别的所有消息，如果指定了一个范围，则将显示该范围内的所有消息，包括该范围的开始值和结束值，这将为指定的优先级添加<code>PRIORITY=</code>匹配项。</li><li><code>-c, --cursor=</code>: 从传递的游标指定的日志位置开始显示条目。</li><li><code>--after-cursor=</code>: 从该光标指定的位置之后的日志位置开始显示条目，使用<code>--show-cursor</code>选项时将显示光标。</li><li><code>--show-cursor</code>: 光标显示在最后一项的两个破折号后，类似于<code>-- cursor: s=0639...</code>，光标的格式是私有的，可能会更改。</li><li><code>--since=, --until=</code>: 分别在指定日期或更新日期，或在指定日期或更新日期开始显示条目，日期规范的格式应该是<code>2012-10-30 18:17:16</code>，如果省略了时间部分，则假定为<code>00:00:00</code>，如果只省略了<code>seconds</code>组件，则假定为<code>:00</code>，如果省略了<code>date</code>部分，则假定为当前日期，或者理解字符串<code>yesterday</code>、<code>today</code>、<code>tomorrow</code>，分别表示当前日期的前一天<code>00:00:00</code>、当前日期的前一天<code>00:00:00</code>、当前日期的后一天，<code>now</code>指的是当前时间，最后，可以指定相对次数，以<code>-</code>或<code>+</code>作为前缀，分别表示当前时间之前或之后的次数。</li><li><code>-F, --field=</code>: 在日志的所有条目中打印指定字段可以接受的所有可能数据值。</li><li><code>--system, --user</code>: 显示来自系统服务和内核的消息(使用<code>--system</code>)，显示来自当前用户服务的消息(使用<code>--user</code>)，如果两者都未指定，则显示用户可以看到的所有消息。</li><li><code>-M, --machine=</code>: 显示来自运行中的本地容器的消息，指定要连接的容器名称。</li><li><code>-D DIR, --directory=DIR</code>: 以目录路径作为参数，如果指定，<code>journalctl</code>将操作指定的日志目录<code>DIR</code>，而不是默认的运行时和系统日志路径。</li><li><code>--file=GLOB</code>: 以文件<code>glob</code>作为参数，如果指定，<code>journalctl</code>将操作与<code>GLOB</code>匹配的指定日志文件，而不是默认的运行时和系统日志路径，可以指定多次，在这种情况下文件将被适当地交错。</li><li><code>--root=ROOT</code>: 以目录路径作为参数，如果指定，<code>journalctl</code>将对指定目录下的目录文件层次结构而不是根目录进行操作，例如<code>--update catalog</code>将创建<code>root/var/lib/systemd/catalog/database</code>。</li><li><code>--new-id128</code>: 生成一个新的适合标识消息的<code>128</code>位<code>ID</code>，而不是显示日志内容，这是为那些需要为他们引入的新消息使用新标识符并希望使其可识别的开发人员准备的，这将以三种不同的格式打印新的<code>ID</code>，这些格式可以复制到源代码或类似的文件中。</li><li><code>--header</code>: 不是显示日志内容，而是显示所访问日志字段的内部头信息。</li><li><code>--disk-usage</code>: 显示所有日志文件的当前磁盘使用情况。</li><li><code>--list-catalog [128-bit-ID...]</code>: 以消息<code>id</code>表的形式列出消息目录的内容，以及它们的简短描述字符串，如果指定了任何<code>128</code>位<code>id</code>，则只显示那些条目。</li><li><code>--dump-catalog [128-bit-ID...]</code>: 显示消息目录的内容，条目由由两个破折号和<code>ID</code>组成的行分隔，格式与<code>.catalog</code>文件相同，如果指定了任何<code>128</code>位<code>id</code>，则只显示那些条目。</li><li><code>--update-catalog</code>: 更新消息目录索引，每次安装、删除或更新新的编目文件以重新生成二进制编目索引时，都需要执行此命令。</li><li><code>--setup-keys</code>: 生成一个用于前向安全密封<code>FSS</code>的新密钥对，而不是显示日志内容，这将生成一个密封密钥和一个验证密钥，密封密钥存储在日志数据目录中，并保留在主机上，验证键应该存储在外部。</li><li><code>--force</code>: 当传递了<code>--setup keys</code>并且已经配置了前向安全密封<code>FSS</code>时，重新创建<code>FSS keys</code>。</li><li><code>--interval=</code>: 指定使用<code>--setup-keys</code>生成<code>FSS</code>密钥对时密封密钥的更改间隔，较短的时间间隔会增加<code>CPU</code>消耗，但会缩短无法检测到的日志更改的时间范围，默认为<code>15</code>分钟。</li><li><code>--verify</code>: 检查日志文件的内部一致性，如果文件是在启用<code>FSS</code>的情况下生成的，并且<code>FSS</code>验证密钥是用<code>--verify key=</code>指定的，则会验证日志文件的真实性。</li><li><code>--verify-key=</code>: 指定用于<code>--verify</code>操作的<code>FSS</code>验证密钥。</li><li><code>--no-pager</code>: 不将程序的输出内容管道<code>pipe</code>给分页程序。</li><li><code>--vacuum-size=BYTES</code>: 将磁盘使用减少到指定大小以下。</li><li><code>--vacuum-files=INT</code>: 仅保留指定数量的日记文件。</li><li><code>--vacuum-time=TIME</code>: 任何早于指定时间点的条目都将被删除。</li><li><code>--rotate</code>: 要求日志守护进程滚动日志文件，此命令会一直阻塞到滚动操作完成之后才会返回，日志滚动可以确保所有活动的日志文件都被关闭、并被重命名以完成归档，同时新的空白日志文件将被创建，并成为新的活动日志文件，通常可以与<code>--vacuum-size=</code>、<code>--vacuum-time=</code>、<code>--vacuum-file=</code>一起使用， 以提高日志清理的效率。</li><li><code>-h, --help</code>: 输出帮助信息。</li><li><code>--version</code>: 输出版本信息。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>显示本次启动以来的全部日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示内核日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">-k</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>-n</code>参数可以显示最后<code>n</code>行日志，如果不指定行数，默认显示<code>10</code>行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">-n</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定进程的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token assign-left variable">_PID</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示最近<code>30</code>分钟的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">--since</span><span class="token operator">=</span>-30m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示<code>2021</code>年以来的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2021-01-01&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示今天的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">--since</span><span class="token operator">=</span>today
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>-f</code>参数可以实现类型<code>tail -f</code>的功能，持续监控最新的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定<code>Unit</code>的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">-u</span> nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看日志占用的磁盘空间。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl --disk-usage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要求日志守护进程滚动日志文件，日志滚动可以确保所有活动的日志文件都被关闭、并被重命名以完成归档，同时新的空白日志文件将被创建，并成为新的活动日志文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">--rotate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清理一个周前的日志。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl --vacuum-time<span class="token operator">=</span>1week
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将磁盘占用减少到指定大小以下。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>journalctl --vacuum-size<span class="token operator">=</span>10M
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://www.jinbuguo.com/systemd/journalctl.html#
https://www.commandlinux.com/man-page/man1/journalctl.1.html
https://blog.orchidflower.cn/2020/04/20/linux-command-introduction-04-journalctl/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),s=[l];function i(n,t){return d(),o("div",null,s)}const p=e(a,[["render",i],["__file","journalctl命令.html.vue"]]),m=JSON.parse('{"path":"/MacOS/Terminal/journalctl%E5%91%BD%E4%BB%A4.html","title":"journalctl命令","lang":"zh-CN","frontmatter":{"description":"journalctl命令 journalctl命令是Systemd日志系统的一个命令，主要用途是用来查看通过Systemd日志系统记录的日志，在Systemd出现之前，Linux系统及各应用的日志都是分别管理的，Systemd取代了initd之后便开始统一管理了所有Unit的启动日志，可以只用一个journalctl命令，查看所有内核和应用的日志。 语...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/journalctl%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"journalctl命令"}],["meta",{"property":"og:description","content":"journalctl命令 journalctl命令是Systemd日志系统的一个命令，主要用途是用来查看通过Systemd日志系统记录的日志，在Systemd出现之前，Linux系统及各应用的日志都是分别管理的，Systemd取代了initd之后便开始统一管理了所有Unit的启动日志，可以只用一个journalctl命令，查看所有内核和应用的日志。 语..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"journalctl命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":10.54,"words":3162},"filePathRelative":"MacOS/Terminal/journalctl命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{p as comp,m as data};
