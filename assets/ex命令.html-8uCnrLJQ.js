import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{i as c,j as o,z as a}from"./app-lp0sOEvl.js";const d={},n=a(`<h1 id="ex命令" tabindex="-1"><a class="header-anchor" href="#ex命令"><span>ex命令</span></a></h1><p><code>ex</code>命令用于在<code>Ex</code>模式下启动<code>vim</code>文本编辑器，<code>ex</code>执行效果如同<code>vi -e</code>，如要从<code>Ex</code>模式回到普通模式，则在<code>vim</code>中输入<code>:vi</code>或<code>:visual</code>指令即可，可以通过运行<code>vi -e</code>来启动<code>ex</code>，也可以通过运行<code>ex -v</code>来启动<code>vi</code>，<code>ex</code>是<code>vim</code>的基础，<code>vim</code>是世界上最受欢迎的文本编辑器之一。<code>ex</code>并不是另一个编辑器，应该说<code>vi</code>是更一般更基本的<code>ex</code>行编辑器的可视模式，所以<code>ex</code>算是<code>vi</code>的底层行编辑器。由于一些<code>ex</code>命令可以节省大量的编辑时间，因此在使用<code>vi</code>时它们是非常有用的，这些命令的大部分都可以在不离开<code>vi</code>的情况下使用。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ex <span class="token punctuation">[</span> -<span class="token operator">|</span> <span class="token parameter variable">-s</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-l</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-L</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-R</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token punctuation">[</span> <span class="token function">file</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-t</span> tag <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-v</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-V</span> <span class="token punctuation">]</span> 
   <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-wn</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-C</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> +command <span class="token operator">|</span> <span class="token parameter variable">-c</span> <span class="token builtin class-name">command</span> <span class="token punctuation">]</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><ul><li><code>--</code>: 此后仅文件名。</li><li><code>-v</code>: 在<code>vi</code>模式下启动<code>vim</code>。</li><li><code>-e</code>: 在<code>ex</code>模式下启动<code>vim</code>。</li><li><code>-E</code>: 以改进的<code>ex</code>模式启动<code>vim</code>。</li><li><code>-s</code>: 沉默模式，仅当以<code>Ex</code>开头或在<code>-s</code>选项之前给出<code>-e</code>选项时生效。</li><li><code>-d</code>: 以<code>diff</code>模式启动，应该有两个或三个文件名参数，<code>vim</code>将打开所有文件并显示它们之间的差异，像<code>vimdiff</code>一样工作。</li><li><code>-y</code>: 以简单模式启动<code>vim</code>，类似于<code>evim</code>或<code>eview</code>，使<code>vim</code>的行为像单击并键入编辑器。</li><li><code>-R</code>: 只读模式，将设置<code>readonly</code>选项，此时仍然可以编辑缓冲区，但将防止意外覆盖文件。如果仍要覆盖文件，请在<code>Ex</code>命令中使用<code>w!</code>。</li><li><code>-Z</code>: 限制模式，类似于<code>rvim</code>。</li><li><code>-m</code>: 禁止修改文件，重置写入选项，此时仍然可以修改缓冲区，但不可写入文件。</li><li><code>-M</code>: 不允许修改，可修改和写入选项将被取消设置，因此不允许进行更改并且无法写入文件。请注意，可以设置这些选项以进行修改。</li><li><code>-b</code>: 二进制模式，将设置一些选项，以便可以编辑二进制文件或可执行文件。</li><li><code>-l</code>: <code>Lisp</code>模式，将<code>lisp</code>和<code>showmatch</code>选项设置为开。</li><li><code>-C</code>: 兼容的，设置<code>兼容</code>选项，这将使<code>vim</code>的行为与<code>vi</code>类似，即使存在<code>.vimrc</code>文件。</li><li><code>-N</code>: 不兼容模式，重置兼容选项，即使<code>.vimrc</code>文件不存在，这也会使<code>vim</code>表现得更好，但与<code>vi</code>的兼容性较差。</li><li><code>-V[N][fname]</code>: 详细信息，提供有关哪些文件来源以及用于读取和写入<code>viminfo</code>文件的消息，可选数字<code>N</code>是详细的值，默认值是<code>10</code>。</li><li><code>-D</code>: 调试模式，从脚本执行第一个命令时转到调试模式。</li><li><code>-n</code>: 不会使用交换文件，这样崩溃后的恢复将是不可能的。如果要在非常慢的介质例如软盘上编辑文件，此功能非常方便。</li><li><code>-r</code>: 列出交换文件，以及有关使用它们进行恢复的信息。</li><li><code>-r &lt;file name&gt;</code>: 恢复模式，交换文件用于恢复崩溃的编辑会话，交换文件与附加<code>.swp</code>的文本文件具有相同的文件名。</li><li><code>-L</code>: 与<code>-r</code>相同。</li><li><code>-A</code>: 如果<code>vim</code>是在阿拉伯语支持下编译的，用于编辑从右向左的文件和阿拉伯语键盘映射，则此选项将以阿拉伯语模式启动<code>vim</code>，即设置<code>ARABIC</code>，否则将发出错误消息，<code>vim</code>将中止。</li><li><code>-H</code>: 以希伯来语模式启动。</li><li><code>-F</code>: 以波斯语模式开始。</li><li><code>-T &lt;terminal&gt;</code>: 告诉<code>vim</code>正在使用的终端的名称，仅在自动方式无效时才需要，应该是<code>vim</code>内置已知的终端，或在<code>termcap</code>或<code>terminfo</code>文件中定义的终端。</li><li><code>--not-a-term</code>: 输入或输出不是终端时跳过警告。</li><li><code>-u &lt;vimrc&gt;</code>: 使用文件<code>.vimrc</code>中的命令进行初始化，将跳过所有其他初始化。使用此选项可编辑特殊类型的文件，也可以用来跳过所有的初始化，方法是给名称<code>NONE</code>。 initialization”。</li><li><code>--noplugin</code>: 跳过加载插件，由<code>-u</code>表示无。</li><li><code>-p[N]</code>: 打开<code>N</code>个标签页，如果省略<code>N</code>，则为每个文件打开一个标签页。</li><li><code>-o[N]</code>: 打开堆叠的<code>N</code>个窗口，当省略<code>N</code>时，为每个文件打开一个窗口。</li><li><code>-O[N]</code>: 并排打开<code>N</code>个窗口，如果省略<code>N</code>，则为每个文件打开一个窗口。</li><li><code>+</code>: 从文件末尾开始。</li><li><code>+&lt;lnum&gt;</code>: 对于第一个文件，光标将定位在<code>num</code>行上。如果缺少<code>num</code>，则光标将位于最后一行。</li><li><code>--cmd &lt;command&gt;</code>: 在加载任何<code>.vimrc</code>文件之前执行<code>&lt;command&gt;</code>。</li><li><code>-c &lt;command&gt;</code>: 加载第一个文件后执行<code>&lt;command&gt;</code>。</li><li><code>-S &lt;session&gt;</code>: 加载第一个文件后源文件的<code>&lt;session&gt;</code>。</li><li><code>-s &lt;scriptin&gt;</code>: 从文件<code>&lt;scriptin&gt;</code>中读取普通模式命令。</li><li><code>-w &lt;scriptout&gt;</code>: 将所有键入的命令附加到文件<code>&lt;scriptout&gt;</code>。</li><li><code>-W &lt;scriptout&gt;</code>: 将所有键入的命令写入文件<code>&lt;scriptout&gt;</code>。</li><li><code>-x</code>: 编辑加密文件。</li><li><code>--startuptime &lt;file&gt;</code>: 将启动定时消息写入<code>&lt;file&gt;</code>。</li><li><code>-i &lt;viminfo&gt;</code>: 使用<code>&lt;viminfo&gt;</code>而不是<code>.viminfo</code>。</li><li><code>-h or --help</code>: 输出帮助信息。</li><li><code>--version</code>: 输出版本信息。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>对<code>file.txt</code>启动<code>ex</code>编辑模式。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ex file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示总行数、当前行号。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">=</span> <span class="token operator">|</span> .<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印文件前<code>3</code>行内容。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1,3</span> p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除第<code>1</code>到第<code>2</code>行，切换回<code>vi</code>模式查看效果。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1,2</span> d
<span class="token function">vi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>移动第<code>1</code>、<code>2</code>行到第<code>3</code>行下边。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1,2</span> m <span class="token number">3</span>
<span class="token function">vi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复制第<code>1</code>、<code>2</code>行到第<code>3</code>行下边。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">1,2</span> co <span class="token number">3</span>
<span class="token function">vi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,19),s=[n];function i(t,l){return c(),o("div",null,s)}const m=e(d,[["render",i],["__file","ex命令.html.vue"]]),u=JSON.parse('{"path":"/MacOS/Terminal/ex%E5%91%BD%E4%BB%A4.html","title":"ex命令","lang":"zh-CN","frontmatter":{"description":"ex命令 ex命令用于在Ex模式下启动vim文本编辑器，ex执行效果如同vi -e，如要从Ex模式回到普通模式，则在vim中输入:vi或:visual指令即可，可以通过运行vi -e来启动ex，也可以通过运行ex -v来启动vi，ex是vim的基础，vim是世界上最受欢迎的文本编辑器之一。ex并不是另一个编辑器，应该说vi是更一般更基本的ex行编辑器的...","head":[["meta",{"property":"og:url","content":"https://tgy.ink/MacOS/Terminal/ex%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"阑风伏雨"}],["meta",{"property":"og:title","content":"ex命令"}],["meta",{"property":"og:description","content":"ex命令 ex命令用于在Ex模式下启动vim文本编辑器，ex执行效果如同vi -e，如要从Ex模式回到普通模式，则在vim中输入:vi或:visual指令即可，可以通过运行vi -e来启动ex，也可以通过运行ex -v来启动vi，ex是vim的基础，vim是世界上最受欢迎的文本编辑器之一。ex并不是另一个编辑器，应该说vi是更一般更基本的ex行编辑器的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-03T03:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-03T03:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ex命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-11-03T03:23:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1667445784000,"updatedTime":1667445784000,"contributors":[{"name":"helloandyzhang","email":"972997077@qq.com","commits":1}]},"readingTime":{"minutes":4.6,"words":1380},"filePathRelative":"MacOS/Terminal/ex命令.md","localizedDate":"2022年11月3日","autoDesc":true}');export{m as comp,u as data};
